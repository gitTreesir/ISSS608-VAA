[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\n\n\nIn this Take-Home Exercise, we will reveal the demographic and financial characteristics of the city of Engagement by using appropriate static and interactive statistical graphics methods, to help the city managers and planners to explore the complex data in an engaging way and reveal hidden patterns.\n\n\n\nTwo (2) datasets will be used, as inputs:\n\nParticipants.csv – information about the residents of City of Engagement who agreed to participate in this study.\nFinancialJournal.csv – information about the financial transactions of the participants from March 2022 to February 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-participants.csv-and-and-perform-data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-participants.csv-and-and-perform-data-wrangling",
    "title": "Take-Home Exercise 01",
    "section": "4.1. Load Participants.csv and and Perform Data Wrangling",
    "text": "4.1. Load Participants.csv and and Perform Data Wrangling\nAs part of data wrangling, we will check the data set for duplicate records and remove them (if there is any), then we will convert the data into the respective data types (string factor, integer, boolean, double), for easier analysis.\n\n\nCode\n# Load the Participants.csv into the environment\nparticipants_raw &lt;- read_csv(\"data/Participants.csv\")\n\n# Check if 'participants' contains any duplicate rows\nhas_duplicates &lt;- any(duplicated(participants_raw))\n\nif (has_duplicates) {\n  #print(\"The participants data frame contains duplicate rows.\")\n  \n  # extracting only the unique participants records\n  participants &lt;- distinct(participants_raw)\n} else {\n  #print(\"The participants data frame does not contain duplicate rows.\")\n  # if there are no duplicate rows, we will just replicate participants data for easy merging later\n  participants &lt;- participants_raw\n}\n\n# Convert participantId, educationLevel columns into string factor\nparticipants$participantId &lt;- as.factor(as.character(participants$participantId))\nparticipants$educationLevel &lt;- as.factor(as.character(participants$educationLevel))\n\n# Convert householdSize and age into whole numbers, i.e. integers\nparticipants$householdSize &lt;- as.integer(participants$householdSize)\nparticipants$age &lt;- as.integer(participants$age)\n\n# Bin the age column into 5 groupings \nparticipants &lt;- participants %&gt;% mutate(age_bin = cut(age, breaks=c(0, 30, 40, 50, 60)))\n\n# Convert haveKids column into a logical (boolean) data type\nparticipants$haveKids &lt;- as.logical(participants$haveKids)\n\n# Convert joviality column into a double data type\nparticipants$joviality &lt;- as.double(participants$joviality)\n\n# Bin the joviality column into 3 broad categories\nparticipants &lt;- participants %&gt;% mutate(jov_bin = cut(joviality, breaks=c(0, 0.2, 0.4, 0.6, 0.8, 1.0)))\n\n\n\n4.2. Load FinancialJournal.csv and Perform Data Wrangling\nAs part of data wrangling, we will check the data set for duplicate records and remove them (if there is any), then we will convert the data into the respective data types (string factor, integer, boolean, double), for easier analysis.\nWe will also be extracting the year and month from the timestamp column and transpose the values in the category column into individual columns.\n\n\nCode\n# Load the FinancialJournal.csv into the environment\nfinjournal_raw &lt;- read_csv(\"data/FinancialJournal.csv\")\n\n# Check if 'finjournal' contains any duplicate rows\nhas_duplicates &lt;- any(duplicated(finjournal_raw))\n\nif (has_duplicates) {\n  print(\"The finjournal_raw data frame contains duplicate rows.\")\n  \n  # Remove duplicate records from the 'finjournal_raw' data frame\n  finjournal &lt;- distinct(finjournal_raw)\n} else {\n  print(\"The finjournal_raw data frame does not contain duplicate rows.\")\n  # if there are no duplicate rows, we will just replicate finjournal_raw data for easy merging \n  finjournal &lt;- finjournal_raw\n}\n\n\n[1] \"The finjournal_raw data frame contains duplicate rows.\"\n\n\nCode\n# Convert participantId, category columns into string factor \nfinjournal$participantId &lt;- as.factor(as.character(finjournal$participantId))\nfinjournal$category &lt;- as.factor(as.character(finjournal$category))\n\n# Extract the date component from timestamp column\nfinjournal$date &lt;- as.Date(finjournal$timestamp)\n\n# Extract the month and year from the date component\nfinjournal$mthYear &lt;- format(finjournal$date, \"%m-%Y\")\n\n# Convert the negative amount values to absolute values and round to 2 decimal places\nfinjournal$amount &lt;- round(abs(finjournal$amount), 2)\n\n\n\n4.2.1. Checking the quality of financial journal data\nThere are often dirty data that we will need to cleanse before performing any data analysis. This portion will check on the quality of the financial journal data.\n\n4.2.1.1. Identifying any possible outliers by retrieving the total number of transactions for each participant\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\nfinjournal_grp &lt;- finjournal %&gt;%\n  group_by(participantId) %&gt;%\n  summarise(transaction_cnt = n()) %&gt;%\n  arrange(transaction_cnt)\n\n# Plotting a histogram with the data extracted for better visualisation\nplot &lt;- ggplot(data = finjournal_grp, \n               aes(x = transaction_cnt)) +\n  geom_histogram(color=\"gray30\", fill=\"deepskyblue3\") + \n  ylim(0, 150) +\n  ggtitle(\"Distribution of Transactions by Participants\") + \n  xlab(\"Transaction Count\") +\n  ylab(\"Number of Participants\") + \n  theme_light()\n\nplot &lt;- ggplotly(plot, tooltip = c(\"y\"))\n\nplot\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs you noticed from the chart above, there is a number of participants (131 of them in total), who have a significantly low number of transaction records, which is far off from the main distribution. As such, we will treat these as outliers and remove them from our analysis.\n\n\n\n\n\n4.2.1.2. Removing the outliers\nWe will proceed to remove the 131 participants who have significantly low number of transaction records, compared to the rest.\n\n\nCode\n# Get the transaction count for the last row of the 131 outliers \ntxn_count &lt;- finjournal_grp[131, \"transaction_cnt\"]\n\n# Extract the participants without the 131 participants \nfinjournal_grp_filtered &lt;- finjournal_grp %&gt;%\n  filter(transaction_cnt &gt; as.integer(txn_count))\n\n# Remove the 131 participants from the finjournal\nfinjournal_filtered &lt;- merge(finjournal, finjournal_grp_filtered, by = \"participantId\")\n\n\n\n\n4.2.1.3. Transposing the category of transaction into indvidual columns for easy analysis\nIn this section, we will be performing a series of data wrangling activities for each participant:\n\nsum up all the daily transactions amount based on the respective categories\ntranspose the transaction categories into multiple columns (Education, Food, Recreation, Shelter, Wage, RentAdjustment)\nreplace all the NA values to 0\nderive total monthly expenses and total monthly earnings\nderive monthly savings (earnings - expenses)\n\n\n\nCode\n# sum up all the daily transactions amount based on the respective categories\ntemp_finjournal &lt;- finjournal_filtered %&gt;% \n  group_by(participantId, category, mthYear) %&gt;% \n  summarise(Total = sum(amount))\n\n# Transpose the categories to columns\ntemp_finjournal &lt;- pivot_wider(temp_finjournal, \n                               names_from = category, \n                               values_from = Total)\n\n# Replace all the NA values to 0\ntemp_finjournal[is.na(temp_finjournal)] &lt;- 0.0\n\n# Derive the total monthly expenses and total monthly earnings for each participant \ntemp_finjournal_sum &lt;- temp_finjournal %&gt;%\n  group_by(participantId, mthYear) %&gt;%\n  summarize(sum_expense = sum(Education, Food,\n                              Recreation, Shelter),\n            sum_earning = sum(Wage, RentAdjustment))\n\n# Derive the monthly savings for each participant\n\ntemp_finjournal_sum$saving &lt;- temp_finjournal_sum$sum_earning -\n                              temp_finjournal_sum$sum_expense\n\n\nfinal_finjournal &lt;- merge(temp_finjournal, temp_finjournal_sum, by = \"participantId\")\n\n# Removing the repeated \"mthYear.y\" column and rename \"mthYear.x\" column to \"mthYear\"\nfinal_finjournal &lt;- select(final_finjournal, -c(mthYear.y))\n\nnames(final_finjournal)[2] &lt;- \"mthYear\"\n\n\n\n\nCode\n### Not sure if want to do this way for analysis. KIV KIV KIV\n### KIV \n\n#final_finjournal_wide &lt;- final_finjournal %&gt;%\n#  pivot_wider(names_from = mthYear, \n#              values_from = c(Education, Food, Recreation, Shelter, Wage, RentAdjustment))\n\n# Replace all the 'NA' values to 0.0\n#final_finjournal_wide[is.na(final_finjournal_wide)] &lt;- 0.0\n\n\n\n\n\n4.3 Combine the 2 data sets\nWe will combine the finalised data sets of Participants and FinancialJournal into 1 single data frame for ease of analysis.\n\n\nCode\n# Merge the two files based on the 'participantId' column\n#merged_data &lt;- merge(participants, final_finjournal_wide, by = \"participantId\")   #will need this we decide to revise the earlier part with final_finjournal_wide\nmerged_data &lt;- merge(participants, final_finjournal, by = \"participantId\")\n\n# Write the merged data to a new CSV file -&gt; This might not be necessary once we have checked the data\n#write_csv(merged_data, \"data/combined.csv\", na=\"\", append=FALSE, col_names=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\n\nCode\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, hrbrthemes)\n\n\n\n\n\nIt consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\n\nCode\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, hrbrthemes)\n\n\n\n\n\nIt consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 02",
    "section": "2. Beyond ggplot2 Annotation: ggrepel",
    "text": "2. Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.1. Working with ggrepel\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in the above example.\nTo do so, we simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\nNote: We will get the warning message: “ggrepel: 318 unlabeled data points (too many overlaps). Consider increasing max.overlaps” when we run the code snippet. However, in order to eliminate the warning message, we will need to set max.overlaps=Inf. This, however, makes the entire chart cluttered with labels (which seemed worse that the original chart above, without using ggrepel).\nAlternatively, we can just set warning=FALSE to suppress the warning message and let ggrepel does its work of suggesting the ‘best’ number of labels.\nTo show the comparison, the left tab code snippet will present the warning message, while the right tab code snippet will show the chart is cluttered with labels when we set max.overlaps=Inf.\n\nOriginal Codes (without setting max.overlaps=Inf)Revised Codes (with max.overlaps=Inf)\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\", max.overlaps=Inf) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 02",
    "section": "3. Beyond ggplot2 Themes",
    "text": "3. Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nRefer to this link to learn more about ggplot2 Themes\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n3.1. Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n3.2. Working with hrbthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\nCode\n#pacman::p_load(extrafont)\n#font_import()\n#loadfonts(device = \"win\")\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\nFrom the example above, we learnt that\n\naxis_title_size argument is used to increase the font size of the axis title to 18\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 02",
    "section": "4. Beyond Single Graph",
    "text": "4. Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\nFirstly, the histogram for MATHS scores\n\n\nCode\n p1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\nNext, the histogram for ENGLISH scores\n\n\nCode\np2 &lt;- ggplot(data=exam_data,\n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\n\nCode\np3 &lt;- ggplot(data=exam_data,\n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n4.1. Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package.\nIn this section, We will use a ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n4.2. Combining 2 ggplot2 graphs\nFigure below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\n\nCode\np1 + p2\n\n\n\n\n\n\n\n4.3. Combining 3 ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n\nCode\n(p1 / p2) | p3\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n4.4. Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below. For tagging,\n\n‘1’ for Arabic numerals,\n‘A’ for uppercase Latin letters,\n‘a’ for lowercase Latin letters,\n‘I’ for uppercase Roman numerals, and\n‘i’ for lowercase Roman numerals.\n\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n4.5. Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n\nCode\np12 &lt;- p1|p2\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n4.6. Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 03a - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\npatchwork for combining multiple ggplot2 graphs into one figure.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\nCode\npacman::p_load(ggiraph, plotly, DT, patchwork, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "title": "Hands-on Exercise 03a - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\npatchwork for combining multiple ggplot2 graphs into one figure.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\nCode\npacman::p_load(ggiraph, plotly, DT, patchwork, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "Hands-on Exercise 03a - Programming Interactive Data Visualisation with R",
    "section": "2. Importing Data",
    "text": "2. Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 03a - Programming Interactive Data Visualisation with R",
    "section": "3. Interactive Data Visualisation - ggiraph methods",
    "text": "3. Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tool tips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3.1. Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package.\nNotice that the code chunk consists of two parts.\n\nFirst, an ggplot object will be created.\nNext, girafe() of ggiraph will be used to create an interactive svg object.\n\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nNotice that two steps are involved.\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an html page.\n\nNOTE : By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n3.2. Displaying multiple information on tooltip\nWe can also customise the content of the tooltip by including a list object as shown in the code chunk below.\n\n\nCode\n# The first three lines of codes in the code chunk create a new field called tooltip.\n#  At the same time, it populates text in ID and CLASS fields into the newly created field. \nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\n# Next, this newly created field is used as tooltip field.\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\nNOTE : By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n3.3. Customising Tooltip Style\nExample below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n\nCode\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n3.4. Displaying statistics on tooltip\nIn this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip. Code chunk below shows an advanced way to customise tooltip.\n\n\nCode\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n3.5. Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)\n\n\n\n\n\n\nNOTE :\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n3.6. Styling hover effect\nIn the example below, css codes are used to change the highlighting effect.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)\n\n\n\n\n\n\nNOTE:\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nDifferent from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n3.7. Combining tooltip and hover effect\nThere are times that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)\n\n\n\n\n\n\nNOTE : Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n3.8. Click effect with onclick\nAn example of onclick argument of ggiraph provides hotlink interactivity on the web.\n\n\nCode\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n\n\n\n\n\n\nNOTE :\n\nWeb document link with a data object will be displayed on the web browser upon mouse click.\nWARNING Note that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n3.9. Coordinated Multiple Views with ggiraph\nExample below shows coordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\nCode\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       )\n      )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 03a - Programming Interactive Data Visualisation with R",
    "section": "4. Interactive Data Visualisation - plotly methods!",
    "text": "4. Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\n\n\n\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n4.1. Creating an interactive scatter plot: plot_ly() method\nThe example below shows a basic interactive plot created by using plot_ly().\n\n\nCode\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n4.2. Working with visual variable: plot_ly() method\nThe example below uses the color argument to map to a qualitative visual variable (i.e. RACE).\nNOTE : Click on the colour symbol at the legend for filtering of the data by respective RACE.\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE,\n        type=\"scatter\")\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n4.3. Creating an interactive scatter plot: ggplotly() method\nThe example below plots an interactive scatter plot by using ggplotly().\nNOTE : Notice that the only extra line you need to include in the code chunk is ggplotly().\n\n\nCode\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n4.4. Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nNOTE : Click on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\nCode\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 03a - Programming Interactive Data Visualisation with R",
    "section": "5. Interactive Data Visualisation - crosstalk methods!",
    "text": "5. Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n5.1. Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\n\nCode\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n5.2. Linked brushing: crosstalk method\nExample below is used to implement the coordinated brushing shown above.\n\n\nCode\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)\n\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "2.1. Loading the R packages",
    "text": "2.1. Loading the R packages\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\nCode\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-the-data",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "2.2. Importing the data",
    "text": "2.2. Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nImporting Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nThings to learn :\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "3.1. Building a static population bubble plot",
    "text": "3.1. Building a static population bubble plot\nIn the example below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "3.2. Building the animated bubble plot",
    "text": "3.2. Building the animated bubble plot\nIn the example below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "4.1. Building an animated bubble plot: ggplotly() method",
    "text": "4.1. Building an animated bubble plot: ggplotly() method\nIn this example, we will create an animated bubble plot by using ggplotly() method.\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nThings to learn :\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 03b - Programming Animated Statistical Graphics with R",
    "section": "4.2. Building an animated bubble plot: plot_ly() method",
    "text": "4.2. Building an animated bubble plot: plot_ly() method\nIn this example, we will create an animated bubble plot by using plot_ly() method.\n\n\nCode\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 04a - Visual Statistical Analysis",
    "section": "",
    "text": "In this exercise using Exam_data, we will be using ggstatsplot and tidyverse. rstantools and PMCMRplus are also be required for plotting the ONEWAY ANOVA graph.\n\n\nCode\npacman::p_load(ggstatsplot, tidyverse, rstantools)\n\n\n\n\n\nFor this exercise, Exam_data.csv provided will be imported into R by using read_csv() of readr package.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores, with default information: - statistical details - Bayes Factor - sample sizes - distribution summary.\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n\n\n\n\n\n\nThe code chunk below shows ggbetweenstats() being used to build a visual for two-sample mean test of Maths scores by gender.Default information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nCode\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nThe code chunk below shows ggbetweenstats() being used to build a visual for One-way ANOVA test on English score by race.\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\nCode\nggbetweenstats(\n  data = exam_data,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below shows ggscatterstats() being used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nCode\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\n\nCode\nexam1 &lt;- exam_data %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nWe then use ggbarstats() to build a visual for Significant Test of Association, as shown in the code chunk below.\n\n\nCode\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "title": "Hands-on Exercise 04a - Visual Statistical Analysis",
    "section": "",
    "text": "In this exercise using Exam_data, we will be using ggstatsplot and tidyverse. rstantools and PMCMRplus are also be required for plotting the ONEWAY ANOVA graph.\n\n\nCode\npacman::p_load(ggstatsplot, tidyverse, rstantools)\n\n\n\n\n\nFor this exercise, Exam_data.csv provided will be imported into R by using read_csv() of readr package.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores, with default information: - statistical details - Bayes Factor - sample sizes - distribution summary.\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n\n\n\n\n\n\nThe code chunk below shows ggbetweenstats() being used to build a visual for two-sample mean test of Maths scores by gender.Default information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nCode\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nThe code chunk below shows ggbetweenstats() being used to build a visual for One-way ANOVA test on English score by race.\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\nCode\nggbetweenstats(\n  data = exam_data,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below shows ggscatterstats() being used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nCode\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\n\nCode\nexam1 &lt;- exam_data %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nWe then use ggbarstats() to build a visual for Significant Test of Association, as shown in the code chunk below.\n\n\nCode\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-models",
    "title": "Hands-on Exercise 04a - Visual Statistical Analysis",
    "section": "2. Visualising Models",
    "text": "2. Visualising Models\nIn this section, we will visualise model diagnostic and model parameters by using parameters package.\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n2.1. Getting Started - Installing and Loading the required R Packages\n\n\nCode\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n\n2.2. Importing Data (ToyotaCorolla.xls)\nFor this exercise, ToyotaCorolla.xls provided will be imported into R by using read_xls() of readxl package.\n\n\nCode\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n2.3. Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\n\nCode\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n2.4. Model Diagnostic: checking for multicolinearity\nUsing check_collinearity() method from the performance package\n\n\nCode\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n\nCode\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n2.5. Model Diagnostic: checking normality assumption\nUsing check_normality() method from the performance package\n\n\nCode\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n\n2.6. Model Diagnostic: Check model for homogeneity of variances\nUsing check_heteroscedasticity() method from the performance package\n\n\nCode\ncheck_h &lt;- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\n\n2.7. Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\n\nCode\ncheck_model(model1)\n\n\n\n\n\n\n\n2.8. Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package are used to visualise the parameters of a regression model.\n\n\nCode\nplot(parameters(model1))\n\n\n\n\n\n\n\n2.9. Visualising Regression Parameters: ggcoefstats() method\nThis example uses ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\n\nCode\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 04b - Visualising Uncertainty",
    "section": "",
    "text": "A point estimate is a single number, such as a mean.\nUncertainty is expressed as standard error, confidence interval, or credible interval\nImportant:\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualizing-the-uncertainty-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualizing-the-uncertainty-of-point-estimates",
    "title": "Hands-on Exercise 04b - Visualising Uncertainty",
    "section": "",
    "text": "A point estimate is a single number, such as a mean.\nUncertainty is expressed as standard error, confidence interval, or credible interval\nImportant:\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "title": "Hands-on Exercise 04b - Visualising Uncertainty",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1. Installing and Loading the required R Packages\nIn this exercise using Exam_data, we will be using tidyverse, plotly, crosstalk, DT, ggdist and gganimate.\n\n\nCode\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\n\n\n\n\n2.2. Importing Data (Exam_data)\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n2.3. Visualizing the uncertainty of point estimates: ggplot2 methods\nThe code chunk below performs the followings:\n\ngroup the observation by RACE,\ncomputes the count of observations, mean, standard deviation and standard error of Maths by RACE, and\nsave the output as a tibble data table called my_sum.\n\n\n\nCode\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nmy_sum\n\n\n# A tibble: 4 × 5\n  RACE        n  mean    sd    se\n  &lt;chr&gt;   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Chinese   193  76.5  15.7  1.13\n2 Indian     12  60.7  23.4  7.04\n3 Malay     108  57.4  21.1  2.04\n4 Others      9  69.7  10.7  3.79\n\n\nNext, the code chunk below will\n\n\nCode\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n2.4. Visualizing the uncertainty of point estimates: ggplot2 methods\nThe code chunk below is used to reveal the standard error of mean maths score by race.\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\n\n\n\n\n\n2.5. Visualizing the uncertainty of point estimates: ggplot2 methods\nPlotting the 95% confidence interval of mean maths score by race. The error bars are sorted by the average maths scores.\n\n\nCode\nmy_sum2 &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1)) %&gt;%\n  mutate(ci95= qt(c(0.05, 0.95), length(n) - 1) * se) %&gt;%\n  mutate(ci99= qt(c(0.01, 0.99), length(n) - 1) * se)\n\nmy_sum2$RACE = with(my_sum2, reorder(RACE, -mean))\n\nggplot(my_sum2) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-ci95, \n        ymax=mean+ci95), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"95% Confidence Interval of mean maths score by race\")\n\n\n\n\n\n\n\n2.6. Visualizing the uncertainty of point estimates with interactive error bars\nInteractive error bars for the 99% confidence interval of mean maths score by race.\n\n\nCode\ncolnames(my_sum) &lt;- c('Race', 'No. of pupils','Avg Scores','Std Dev','Std Error')\ncolnames(my_sum2) &lt;- c('Race', 'No. of pupils','Avg Scores','Std Dev','Std Error', '95% CI', '99% CI')\n\nDT::datatable(my_sum, class= \"compact\")\n\n\n\n\n\n\n\nCode\nd &lt;- highlight_key(my_sum)\n\np &lt;- ggplot(my_sum2) +\n      geom_errorbar(\n        aes(x=Race, \n            ymin=`Avg Scores`-`99% CI`, \n            ymax=`Avg Scores`+`99% CI`), \n        width=0.2, \n        colour=\"black\", \n        alpha=0.9, \n        linewidth=0.5) +\n      geom_point(aes\n               (x=Race, \n                y=`Avg Scores`, \n                text=paste(\"N=\",`No. of pupils`,\"&lt;br&gt;99% CI=\",`99% CI`)), \n               stat=\"identity\", \n               color=\"red\",\n               size = 1.5,\n               alpha=1) +\n      ggtitle(\"99% Confidence Interval of \\n mean maths score by race\")\n\n\ngg &lt;- highlight(ggplotly(p), tooltip=\"text\")\n#                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 04b - Visualising Uncertainty",
    "section": "3. Visualising Uncertainty: ggdist package",
    "text": "3. Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\n\n\n\n3.1. Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\nNOTE: This function comes with many arguments, refer to the syntax reference here for more detail.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n3.2. Visualizing the uncertainty of point estimates: ggdist methods\nShowing the plots with 95% and 99% confidence intervals.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n3.3. Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\nNOTE: This function comes with many arguments, refer to the syntax reference here for more detail.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 04b - Visualising Uncertainty",
    "section": "4. Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "4. Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nStep 1: Installing ungeviz package (only need to perform this step once1)\n\n\nCode\n# devtools::install_github(\"wilkelab/ungeviz\")\n\n\nStep 2: Launch the application in R\n\n\nCode\nlibrary(ungeviz)\n\n\n\n\nCode\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 04b - Visualising Uncertainty",
    "section": "5. Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "5. Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\n\nCode\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 04c - Building Funnel Plot with R",
    "section": "",
    "text": "In this exercise, we will be using\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\n\nCode\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\n\nFor this exercise, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal.\nFor this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\n\nCode\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "title": "Hands-on Exercise 04c - Building Funnel Plot with R",
    "section": "",
    "text": "In this exercise, we will be using\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\n\nCode\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\n\nFor this exercise, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal.\nFor this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\n\nCode\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnelplotr-methods",
    "title": "Hands-on Exercise 04c - Building Funnel Plot with R",
    "section": "1.2. FunnelPlotR methods",
    "text": "1.2. FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nx_range and y_range: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n1.2.1. FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n1.2.2. FunnelPlotR methods: Makeover 1\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  x_range = c(0, 6500),  #&lt;&lt;\n  y_range = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions).\nx_range and y_range are used to set the range of x-axis and y-axis\n\n\n\n1.2.3. FunnelPlotR methods: Makeover 2\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 04c - Building Funnel Plot with R",
    "section": "1.3. Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "1.3. Funnel Plot for Fair Visual Comparison: ggplot2 methods\nBuilding funnel plots step-by-step by using ggplot2, allows customising speciallised data visualisation like funnel plot.\n\n1.3.1. Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\n\nCode\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\n\nCode\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\n1.3.2. Calculate lower and upper limits for 95% and 99.9% CI\nThe codes below is used to compute the lower and upper limits for 95% confidence interval.\n\n\nCode\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\n1.3.3. Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nCode\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n1.3.4. Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nCode\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "Code\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#getting-started",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "Code\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#working-with-theme",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#working-with-theme",
    "title": "In-Class Exercise 1",
    "section": "Working with theme",
    "text": "Working with theme\nPlot a horizontal bar chart\n\nChange the colours of plot panel background of theme_minimal() to light blue and the color of gridlines to white\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() + \n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour = \"lightblue\", \n                                    linewidth = 0.5, linetype = \"solid\"),\n    panel.grid.major = element_line(linewidth = 0.5, linetype = 'solid', colour = \"white\"), \n    panel.grid.minor = element_line(linewidth = 0.25, linetype = 'solid', colour = \"white\"))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "title": "In-Class Exercise 1",
    "section": "Designing Data-drive Graphics for Analysis I",
    "text": "Designing Data-drive Graphics for Analysis I\nIn this example, we will revise the vertical bar chart to provide additional information.\nThe left tab panel shows the original vertical bar chart, while the right panel shows the revised version of the vertical bar chart.\n\nOriginalRevised\n\n\nA simple vertical bar chart for frequency analysis.\nCritics:\n\ny-axis label is not clear (i.e. count)\nTo support effective comparison, the bars should be sorted by their respective frequencies.\nFor static graph, frequency values should be added to provide addition information.\n\n\n\nCode\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\nThe revised vertical bar chart will show:\n\nThe y-axis will be changed to the Total Number of Pupils\nIn order to support effective comparison, we will sort the bars by their respective frequencies\nSince this is a static graph, we will also include the frequency values to provide additional information.\n\n\n\nCode\nggplot(data = exam_data,\n       aes(x = reorder(RACE, RACE,\n                       function(x)-length(x)))) +\n  geom_bar() + \n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"RACE\") +\n  ylab(\"NO. OF\\nPUPILS\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-ii",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-ii",
    "title": "In-Class Exercise 1",
    "section": "Designing Data-drive Graphics for Analysis II",
    "text": "Designing Data-drive Graphics for Analysis II\nIn this example, we will improve the aesthetics of the histogram.\nThe left tab panel shows the original version of the histogram plotted, while the right panel shows the revised version, with added information of the mean and median lines.\n\nOriginalRevised\n\n\nA simple histogram.\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=30)\n\n\n\n\n\n\n\nWe will\n\nChange the fill color to light blue and line color to black\nInclude the mean and median lines onto the histogram plot\n\n\n\nCode\nggplot(data = exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 fill=\"light blue\",\n                 color=\"black\") +\n  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             linewidth=1) +\n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             linewidth=1)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "title": "In-Class Exercise 1",
    "section": "Designing Data-drive Graphics for Analysis III",
    "text": "Designing Data-drive Graphics for Analysis III\nThe original histograms on the left tab (Original) are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\nIn this example, on the right tab (Revised), we will show the distribution of English scores by gender and also include the histogram of all pupils at the background.\n\nOriginalRevised\n\n\n\n\nCode\nggplot(data=exam_data, aes(x = ENGLISH)) + \n  geom_histogram(bins=30) +\n    facet_grid(~ GENDER)\n\n\n\n\n\n\n\n\n\nCode\nbackgd_data &lt;- exam_data   \nd_bg &lt;- backgd_data[, -3]\n\nggplot(backgd_data, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5, bins=30) +\n  geom_histogram(colour = \"black\", bins=30) +\n  facet_wrap(~ GENDER) +\n  guides(none) +  \n  theme_bw()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "title": "In-Class Exercise 1",
    "section": "Designing Data-drive Graphics for Analysis IV",
    "text": "Designing Data-drive Graphics for Analysis IV\nIn this example, we will beautify (makeover) the scatterplot from left tab (Original) to right tab (Revised)\n\nOriginalRevised\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             linewidth=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             linewidth=1)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-Class Exercise 04",
    "section": "",
    "text": "In this exercise using Exam_data, we will be using tidyverse, rstatix, gt and patchwork.\n\npacman::p_load(tidyverse, rstatix, gt, patchwork)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nA Q-Q plot (Quantile-Quantile plot) is used to assess whether a set of data points are normally distributed.\nif the data is normally distrbuted, the points in a Q-Q plot will lie on a straight diagonal line. Conversely, if the points deviate significantly from the straight diagonal line, then it’s less likely that the data is normally distributed.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample=ENGLISH)) + \n  stat_qq() + \n  stat_qq_line()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that the points deviate significantly form the straight diagnoal line. This is a clear indication that the set of data is not normally distributed.\n\n\n\n\n\npng, webshot2 packages will be required to run the following codes.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nqq &lt;- ggplot(exam_data,\n             aes(sample=ENGLISH)) + \n  stat_qq() +\n  stat_qq_line()\n\n# running shapiro test and save into gt() format\nsw_t &lt;- exam_data %&gt;%\n  shapiro_test(ENGLISH) %&gt;%\n  gt()\n\n\n# converting the sw_t into an image file (png)\ntmp &lt;- tempfile(fileext = '.png')\ngtsave(sw_t, tmp)\ntable_png &lt;- png::readPNG(tmp,\n                          native = TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#getting-started",
    "title": "In-Class Exercise 04",
    "section": "",
    "text": "In this exercise using Exam_data, we will be using tidyverse, rstatix, gt and patchwork.\n\npacman::p_load(tidyverse, rstatix, gt, patchwork)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nA Q-Q plot (Quantile-Quantile plot) is used to assess whether a set of data points are normally distributed.\nif the data is normally distrbuted, the points in a Q-Q plot will lie on a straight diagonal line. Conversely, if the points deviate significantly from the straight diagonal line, then it’s less likely that the data is normally distributed.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample=ENGLISH)) + \n  stat_qq() + \n  stat_qq_line()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that the points deviate significantly form the straight diagnoal line. This is a clear indication that the set of data is not normally distributed.\n\n\n\n\n\npng, webshot2 packages will be required to run the following codes.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nqq &lt;- ggplot(exam_data,\n             aes(sample=ENGLISH)) + \n  stat_qq() +\n  stat_qq_line()\n\n# running shapiro test and save into gt() format\nsw_t &lt;- exam_data %&gt;%\n  shapiro_test(ENGLISH) %&gt;%\n  gt()\n\n\n# converting the sw_t into an image file (png)\ntmp &lt;- tempfile(fileext = '.png')\ngtsave(sw_t, tmp)\ntable_png &lt;- png::readPNG(tmp,\n                          native = TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#the-task",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "In this Take-Home Exercise, we will reveal the demographic and financial characteristics of the city of Engagement by using appropriate static and interactive statistical graphics methods, to help the city managers and planners to explore the complex data in an engaging way and reveal hidden patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#data-source",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#data-source",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "Two (2) datasets will be used, as inputs:\n\nParticipants.csv – information about the residents of City of Engagement who agreed to participate in this study.\nFinancialJournal.csv – information about the financial transactions of the participants from March 2022 to February 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-participants.csv",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-participants.csv",
    "title": "Take-Home Exercise 01",
    "section": "3.1. Load Participants.csv",
    "text": "3.1. Load Participants.csv\nImport data from csv using readr::read_csv() and store it in variable participants_raw.\n\n\nShow the codes\n# Load the Participants.csv into the environment\nparticipants_raw &lt;- read_csv(\"data/Participants.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-participants_raw",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-participants_raw",
    "title": "Take-Home Exercise 01",
    "section": "3.2 Perform Data Wrangling on participants_raw",
    "text": "3.2 Perform Data Wrangling on participants_raw\nWe will performing the following activities as part of data wrangling.\n\ncheck the data set for duplicate records and remove them (if there is any)\nconvert the data into the respective data types (string factor, integer, boolean, double), for easier analysis.\n\n\n\nCode\n# Check if 'participants' contains any duplicate rows\nhas_duplicates &lt;- any(duplicated(participants_raw))\n\nif (has_duplicates) {\n  # contains duplicate rows\n  # extracting only the unique participants records\n  participants &lt;- distinct(participants_raw)\n} else {\n  # No duplicate rows\n  # since there are no duplicate rows, we will just replicate participants data for consistency\n  participants &lt;- participants_raw\n}\nparticipants\n\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;    &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality &lt;dbl&gt;\n\n\nLooking at the participants data, we notice that there are a few problems that we need to resolve before we can perform analysis on them\n\nparticipantId is in &lt;dbl&gt; format. Since this is used to identify each participant uniquely, we will convert it to a string factor\neducationLevel is in &lt;chr&gt; format. We will convert it to a string factor\nhouseholdSize is in &lt;dbl&gt; format. We will convert it to &lt;int&gt; format since it should be a whole number.\nage is in &lt;dbl&gt; format. We will convert it to &lt;int&gt; format since it should be a whole number.\njoavlity values are too granular. We will round it to 2 decimal places.\nWe will also bin the age and jovality for ease of analysis\n\n\n\nCode\n# Convert participantId, educationLevel columns into string factor\nparticipants$participantId &lt;- as.factor(as.character(participants$participantId))\nparticipants$educationLevel &lt;- as.factor(as.character(participants$educationLevel))\n\n# Convert householdSize and age into whole numbers, i.e. integers\nparticipants$householdSize &lt;- as.integer(participants$householdSize)\nparticipants$age &lt;- as.integer(participants$age)\n\n# Bin the age column into 5 groupings \nparticipants &lt;- participants %&gt;% mutate(age_bin = cut(age, breaks=c(0, 30, 40, 50, 60)))\n\n# Convert joviality column into a double data type and round it to 2 decimal places\nparticipants$joviality &lt;- round(as.double(participants$joviality), 2)\n\n# Bin the joviality column into 3 broad categories\nparticipants &lt;- participants %&gt;% \n  mutate(jov_bin = cut(joviality, breaks=c(0, 0.2, 0.4, 0.6, 0.8, 1.0)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-financialjournal.csv-and-perform-data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-financialjournal.csv-and-perform-data-wrangling",
    "title": "Take-Home Exercise 01",
    "section": "3.2. Load FinancialJournal.csv and Perform Data Wrangling",
    "text": "3.2. Load FinancialJournal.csv and Perform Data Wrangling\nAs part of data wrangling, we will check the data set for duplicate records and remove them (if there is any), then we will convert the data into the respective data types (string factor, integer, boolean, double), for easier analysis.\nWe will also be extracting the year and month from the timestamp column and transpose the values in the category column into individual columns.\n\n\nCode\n# Load the FinancialJournal.csv into the environment\nfinjournal_raw &lt;- read_csv(\"data/FinancialJournal.csv\")\n\n# Check if 'finjournal' contains any duplicate rows\nhas_duplicates &lt;- any(duplicated(finjournal_raw))\n\nif (has_duplicates) {\n  print(\"The finjournal_raw data frame contains duplicate rows.\")\n  \n  # Remove duplicate records from the 'finjournal_raw' data frame\n  finjournal &lt;- distinct(finjournal_raw)\n} else {\n  print(\"The finjournal_raw data frame does not contain duplicate rows.\")\n  # if there are no duplicate rows, we will just replicate finjournal_raw data for easy merging \n  finjournal &lt;- finjournal_raw\n}\n\n\n[1] \"The finjournal_raw data frame contains duplicate rows.\"\n\n\nCode\n# Convert participantId, category columns into string factor \nfinjournal$participantId &lt;- as.factor(as.character(finjournal$participantId))\nfinjournal$category &lt;- as.factor(as.character(finjournal$category))\n\n# Extract the date component from timestamp column\nfinjournal$date &lt;- as.Date(finjournal$timestamp)\n\n# Extract the month and year from the date component\nfinjournal$mthYear &lt;- format(finjournal$date, \"%m-%Y\")\n\n# Convert the negative amount values to absolute values and round to 2 decimal places\nfinjournal$amount &lt;- round(abs(finjournal$amount), 2)\n\n\n\n4.2.1. Checking the quality of financial journal data\nThere are often dirty data that we will need to cleanse before performing any data analysis. This portion will check on the quality of the financial journal data.\n\n4.2.1.1. Identifying any possible outliers by retrieving the total number of transactions for each participant\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\nfinjournal_grp &lt;- finjournal %&gt;%\n  group_by(participantId) %&gt;%\n  summarise(transaction_cnt = n()) %&gt;%\n  arrange(transaction_cnt)\n\n# Plotting a histogram with the data extracted for better visualisation\nplot &lt;- ggplot(data = finjournal_grp, \n               aes(x = transaction_cnt)) +\n  geom_histogram(color=\"gray30\", fill=\"deepskyblue3\") + \n  ylim(0, 150) +\n  ggtitle(\"Distribution of Transactions by Participants\") + \n  xlab(\"Transaction Count\") +\n  ylab(\"Number of Participants\") + \n  theme_light()\n\nplot &lt;- ggplotly(plot, tooltip = c(\"y\"))\n\nplot\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs you noticed from the chart above, there is a number of participants (131 of them in total), who have a significantly low number of transaction records, which is far off from the main distribution. As such, we will treat these as outliers and remove them from our analysis.\n\n\n\n\n\n4.2.1.2. Removing the outliers\nWe will proceed to remove the 131 participants who have significantly low number of transaction records, compared to the rest.\n\n\nCode\n# Get the transaction count for the last row of the 131 outliers \ntxn_count &lt;- finjournal_grp[131, \"transaction_cnt\"]\n\n# Extract the participants without the 131 participants \nfinjournal_grp_filtered &lt;- finjournal_grp %&gt;%\n  filter(transaction_cnt &gt; as.integer(txn_count))\n\n# Remove the 131 participants from the finjournal\nfinjournal_filtered &lt;- merge(finjournal, finjournal_grp_filtered, by = \"participantId\")\n\n\n\n\n4.2.1.3. Transposing the category of transaction into indvidual columns for easy analysis\nIn this section, we will be performing a series of data wrangling activities for each participant:\n\nsum up all the daily transactions amount based on the respective categories\ntranspose the transaction categories into multiple columns (Education, Food, Recreation, Shelter, Wage, RentAdjustment)\nreplace all the NA values to 0\nderive total monthly expenses and total monthly earnings\nderive monthly savings (earnings - expenses)\n\n\n\nCode\n# sum up all the daily transactions amount based on the respective categories\ntemp_finjournal &lt;- finjournal_filtered %&gt;% \n  group_by(participantId, category, mthYear) %&gt;% \n  summarise(Total = sum(amount))\n\n# Transpose the categories to columns\ntemp_finjournal &lt;- pivot_wider(temp_finjournal, \n                               names_from = category, \n                               values_from = Total)\n\n# Replace all the NA values to 0\ntemp_finjournal[is.na(temp_finjournal)] &lt;- 0.0\n\n# Derive the total monthly expenses and total monthly earnings for each participant \ntemp_finjournal_sum &lt;- temp_finjournal %&gt;%\n  group_by(participantId, mthYear) %&gt;%\n  summarize(sum_expense = sum(Education, Food,\n                              Recreation, Shelter),\n            sum_earning = sum(Wage, RentAdjustment))\n\n# Derive the monthly savings for each participant\n\ntemp_finjournal_sum$saving &lt;- temp_finjournal_sum$sum_earning -\n                              temp_finjournal_sum$sum_expense\n\n\nfinal_finjournal &lt;- merge(temp_finjournal, temp_finjournal_sum, by = \"participantId\")\n\n# Removing the repeated \"mthYear.y\" column and rename \"mthYear.x\" column to \"mthYear\"\nfinal_finjournal &lt;- select(final_finjournal, -c(mthYear.y))\n\nnames(final_finjournal)[2] &lt;- \"mthYear\"\n\n\n\n\nCode\n### Not sure if want to do this way for analysis. KIV KIV KIV\n### KIV \n\n#final_finjournal_wide &lt;- final_finjournal %&gt;%\n#  pivot_wider(names_from = mthYear, \n#              values_from = c(Education, Food, Recreation, Shelter, Wage, RentAdjustment))\n\n# Replace all the 'NA' values to 0.0\n#final_finjournal_wide[is.na(final_finjournal_wide)] &lt;- 0.0\n\n\n\n\n4.3 Combine the 2 data sets\nWe will combine the finalised data sets of Participants and FinancialJournal into 1 single data frame for ease of analysis.\n\n\nCode\n# Merge the two files based on the 'participantId' column\n#merged_data &lt;- merge(participants, final_finjournal_wide, by = \"participantId\")   #will need this we decide to revise the earlier part with final_finjournal_wide\nmerged_data &lt;- merge(participants, final_finjournal, by = \"participantId\")\n\n# Write the merged data to a new CSV file -&gt; This might not be necessary once we have checked the data\n#write_csv(merged_data, \"data/combined.csv\", na=\"\", append=FALSE, col_names=TRUE)\n\n\n\n\n4.4. Data Analysis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-participants-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-participants-data",
    "title": "Take-Home Exercise 01",
    "section": "3.2 Perform Data Wrangling on participants data",
    "text": "3.2 Perform Data Wrangling on participants data\nAs part of the data wrangling process, we will also check the data set for duplicate records and remove them (if there is any).\n\n\nShow the codes\n# Check if 'participants' contains any duplicate rows\nhas_duplicates &lt;- any(duplicated(participants_raw))\n\nif (has_duplicates) {\n  # contains duplicate rows\n  # extracting only the unique participants records\n  participants &lt;- distinct(participants_raw)\n} else {\n  # No duplicate rows\n  # since there are no duplicate rows, we will just replicate participants data for consistency\n  participants &lt;- participants_raw\n}\nparticipants\n\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           &lt;dbl&gt;         &lt;dbl&gt; &lt;lgl&gt;    &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality &lt;dbl&gt;\n\n\nLooking at the participants data set above, we notice that there are a few problems that we need to resolve before we can perform analysis on them\n\nparticipantId is in &lt;dbl&gt; format. Since this is used to identify each participant uniquely, we will convert it to a string factor\neducationLevel is in &lt;chr&gt; format. We will convert it to a string factor\nhouseholdSize is in &lt;dbl&gt; format. We will convert it to &lt;int&gt; format since it should be a whole number.\nhaveKids is in &lt;lgl&gt; format and has value of TRUE and FALSE, which are not very intuitive. We will change it to YES and NO instead.\nage is in &lt;dbl&gt; format. We will convert it to &lt;int&gt; format since it should be a whole number.\nWe will also bin the age and joviality for analysis purposes.\n\n\n\nShow the codes\n# Convert participantId, educationLevel columns into string factor\nparticipants$participantId &lt;- as.factor(as.character(participants$participantId))\nparticipants$educationLevel &lt;- as.factor(as.character(participants$educationLevel))\n\n# Convert householdSize and age into whole numbers, i.e. integers\nparticipants$householdSize &lt;- as.integer(participants$householdSize)\nparticipants$age &lt;- as.integer(participants$age)\n\n# Replace `TRUE` to `YES` and `FALSE` to `NO` for haveKids column\nparticipants$haveKids &lt;- ifelse(participants$haveKids == \"TRUE\", \"YES\",\n                                participants$haveKids)\n\nparticipants$haveKids &lt;- ifelse(participants$haveKids == \"FALSE\", \"NO\",\n                                participants$haveKids)\n\n\n# Convert joviality column into a double data type and round it to 2 decimal places\nparticipants$joviality &lt;- as.double(participants$joviality)\n\n# Bin the age column into groupings and save into another column, age_bin\nparticipants &lt;- participants %&gt;% mutate(age_bin = cut(age, breaks=c(17, 30, 40, 50, 60)))\n\n# Bin the joviality column into broad categories and save into another column, jov_bin\nparticipants &lt;- participants %&gt;% \n  mutate(jov_bin = cut(joviality, breaks=c(0, 0.2, 0.4, 0.6, 0.8, 1.0)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-financialjournal.csv",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#load-financialjournal.csv",
    "title": "Take-Home Exercise 01",
    "section": "3.3. Load FinancialJournal.csv",
    "text": "3.3. Load FinancialJournal.csv\nImport data from csv using readr::read_csv() and store it in variable finjournal_raw.\n\n\nShow the codes\n# Load the FinancialJournal.csv into the environment\nfinjournal_raw &lt;- read_csv(\"data/FinancialJournal.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-finjournal-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-finjournal-data",
    "title": "Take-Home Exercise 01",
    "section": "3.4. Perform Data Wrangling on finjournal data",
    "text": "3.4. Perform Data Wrangling on finjournal data\nAs part of the data wrangling process, we will also check the data set for duplicate records and remove them (if there is any).\n\n\nCode\n# Load the FinancialJournal.csv into the environment\nfinjournal_raw &lt;- read_csv(\"data/FinancialJournal.csv\")\n\n# Check if 'finjournal' contains any duplicate rows\nhas_duplicates &lt;- any(duplicated(finjournal_raw))\n\nif (has_duplicates) {\n  # contains duplicate rows\n  \n  # Remove duplicate records from the 'finjournal_raw' data frame\n  finjournal &lt;- distinct(finjournal_raw)\n} else {\n  # No duplicate rows\n  # if there are no duplicate rows, we will just replicate finjournal_raw data for consistency\n  finjournal &lt;- finjournal_raw\n}\nfinjournal\n\n\n# A tibble: 1,512,523 × 4\n   participantId timestamp           category  amount\n           &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;      &lt;dbl&gt;\n 1             0 2022-03-01 00:00:00 Wage      2473. \n 2             0 2022-03-01 00:00:00 Shelter   -555. \n 3             0 2022-03-01 00:00:00 Education  -38.0\n 4             1 2022-03-01 00:00:00 Wage      2047. \n 5             1 2022-03-01 00:00:00 Shelter   -555. \n 6             1 2022-03-01 00:00:00 Education  -38.0\n 7             2 2022-03-01 00:00:00 Wage      2437. \n 8             2 2022-03-01 00:00:00 Shelter   -557. \n 9             2 2022-03-01 00:00:00 Education  -12.8\n10             3 2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,512,513 more rows\n\n\nLooking at the finjournal data set above, we notice that there are a few problems that we need to resolve before we can perform analysis on them\n\nparticipantId is in &lt;dbl&gt; format. Since this is used to identify each participant uniquely, we will convert it to a string factor\ntimestamp is in &lt;POSIXct&gt; format. For the purpose of analysis, we will extract the month and year from this data item.\ncategory is in &lt;chr&gt; format. We will convert it to a string factor\namount values are too granular. We will round it to 2 decimal places. There are also negative values, which we will convert all to absolute values instead.\n\n\n\nCode\n# Convert participantId, category columns into string factor \nfinjournal$participantId &lt;- as.factor(as.character(finjournal$participantId))\nfinjournal$category &lt;- as.factor(as.character(finjournal$category))\n\n# Extract the date component from timestamp column\nfinjournal$date &lt;- as.Date(finjournal$timestamp)\n\n# Extract the month and year from the date component\nfinjournal$YearMonth &lt;- format(finjournal$date, \"%Y-%m\")\n\n# Convert the negative amount values to absolute values and round to 2 decimal places\nfinjournal$amount &lt;- round(abs(finjournal$amount), 2)\n\n\n\n3.4.1. Checking the quality of financial journal data\nThere are often dirty data that we will need to cleanse before performing any data analysis. This portion will check on the quality of the financial journal data.\n\n3.4.1.1. Identifying any possible outliers\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\nfinjournal_grp &lt;- finjournal %&gt;%\n  group_by(participantId) %&gt;%\n  summarise(transaction_cnt = n()) %&gt;%\n  arrange(transaction_cnt)\n\n# Plotting a histogram with the data extracted for better visualisation\nplot &lt;- ggplot(data = finjournal_grp, \n               aes(x = transaction_cnt)) +\n  geom_histogram(color=\"gray30\", fill=\"deepskyblue3\") + \n  ylim(0, 150) +\n  ggtitle(\"Distribution of Transactions by Participants\") + \n  xlab(\"Transaction Count\") +\n  ylab(\"Number of Participants\") + \n  theme_light()\n\nplot &lt;- ggplotly(plot, tooltip = c(\"y\"))\n\nplot\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs you noticed from the chart above, there is a number of participants (131 of them in total), who have a significantly low number of transaction records, which is far off from the main distribution. As such, we will treat these as outliers and remove them from our analysis.\n\n\n\n\n3.4.1.2. Removing the outliers\nWe will proceed to remove the 131 participants who have significantly low number of transaction records, compared to the rest.\n\n\nCode\n# Get the transaction count for the last row of the 131 outliers \ntxn_count &lt;- finjournal_grp[131, \"transaction_cnt\"]\n\n# Extract the participants without the 131 participants \nfinjournal_grp_filtered &lt;- finjournal_grp %&gt;%\n  filter(transaction_cnt &gt; as.integer(txn_count))\n\n# Remove the 131 participants from the finjournal\nfinjournal_filtered &lt;- merge(finjournal, finjournal_grp_filtered, by = \"participantId\")\n\n\n\n\n3.4.1.3. Transposing the category of transaction into indvidual columns\nIn this section, we will be performing a series of data wrangling activities for each participant:\n\nsum up all the daily transactions amount based on the respective categories\ntranspose the transaction categories into multiple columns (Education, Food, Recreation, Shelter, Wage, RentAdjustment)\nreplace all the NA values to 0\nderive total monthly expenses and total monthly earnings\nderive monthly savings (earnings - expenses)\n\n\n\nCode\n# sum up all the daily transactions amount based on the respective categories\nfinal_finjournal &lt;- finjournal_filtered %&gt;% \n  group_by(participantId, category, YearMonth) %&gt;% \n  summarise(Total = sum(amount))\n\n# Transpose the categories to columns\nfinal_finjournal_wide &lt;- pivot_wider(final_finjournal, \n                               names_from = category, \n                               values_from = Total)\n\n# Replace all the NA values to 0\nfinal_finjournal_wide[is.na(final_finjournal_wide)] &lt;- 0.0\n\n# Derive the total monthly expenses, total monthly earnings and savings for each participant \nfinal_finjournal_wide$sum_expense &lt;- final_finjournal_wide$Education + \n                                     final_finjournal_wide$Food +\n                                     final_finjournal_wide$Recreation + \n                                     final_finjournal_wide$Shelter\n\nfinal_finjournal_wide$sum_earning &lt;- final_finjournal_wide$Wage + \n                                     final_finjournal_wide$RentAdjustment\n\nfinal_finjournal_wide$saving &lt;- final_finjournal_wide$sum_earning -\n                                final_finjournal_wide$sum_expense\n\nfinal_finjournal_wide$YearMthDay &lt;- \n  as.Date(paste0(final_finjournal_wide$YearMonth,\"-01\"))\n\n\nWe will aggregate all the monthly transactions by participants, since final_finjournal will contain the detailed YearMonth for each participant.\n\n\nCode\n# To have 1 financial journal record per participant \n\nfinal_finjournal_single &lt;- final_finjournal_wide %&gt;% \n  group_by(participantId) %&gt;% \n  summarise(Total_Edu = sum(Education), \n            Total_Food = sum(Food),\n            Total_Rec = sum(Recreation),\n            Total_Shelter = sum(Shelter),\n            Total_Wage = sum(Wage),\n            Total_RentAdj = sum(RentAdjustment),\n            Total_sumExp = sum(sum_expense),\n            Total_sumEarn = sum(sum_earning),\n            Total_saving = sum(saving))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#data-visualisation-and-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#data-visualisation-and-analysis",
    "title": "Take-Home Exercise 01",
    "section": "4. Data Visualisation and Analysis",
    "text": "4. Data Visualisation and Analysis\n\n4.1. Exploratory Data Analysis\n\n4.1.1. Cost of Living over Time\n\n\nCode\nplot_ly(data = single_merged_data,\n        x = ~Total_sumEarn,\n        y = ~Total_saving,\n        color = ~educationLevel)\n\n\n\n\n\n\n\n\nCode\n#bubble plot - is it useful???\nbp &lt;- expanded_merge_data %&gt;%\n  plot_ly(x = ~sum_expense, \n          y = ~sum_earning, \n          size = ~householdSize, \n          color = ~educationLevel, \n          frame = ~YearMonth, \n          text = ~age, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\n\n\n\n\n\nTotal Wage vs Education Level\n\n\n\n4.2. One-sample test\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = single_merged_data,\n  x = Total_sumEarn,\n  type = \"bayes\",\n  test.value = 15000,\n  xlab = \"Total Expenses\"\n)\n\n\n\n\n\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = single_merged_data,\n  x = Total_sumExp,\n  type = \"bayes\",\n  test.value = 15000,\n  xlab = \"Total Expenses\"\n)\n\n\n\n\n\n\n\n4.3. The correlation between Wages, Expenditures and Age\nThe correlation charts show that there is faint negative relationship between the age and wage.\n\nAge and Wage CorrelationAge and Total Expenditure\n\n\n\nggscatterstats(data = single_merged_data,\n               x = age,\n               y = Total_Wage,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Wages and Age\",\n       x = \"Age\",\n       y = \"Total wage\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\nggscatterstats(data = single_merged_data,\n               x = age,\n               y = Total_sumExp,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Expenditure and Age\",\n       x = \"Age\",\n       y = \"Total Expenditure\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n4.4. The correlation between Total Earnings, Expenditures and Savings\nThe correlation charts show that there is weak negative relationship between the Total Earnings and Total Expenditure. In addition, there is a very strong relationship between the Total Earnings and Total Savings.\n\nTotal Earnings and Total SpendingTotal Earnings and Total Saving\n\n\n\nggscatterstats(data = single_merged_data,\n               x = Total_sumExp,\n               y = Total_sumEarn,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Expenditure and Total Earnings\",\n       x = \"Total Expenditure\",\n       y = \"Total Earnings\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\nggscatterstats(data = single_merged_data,\n               x = Total_sumEarn,\n               y = Total_saving,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Earnings and Savings\",\n       x = \"Total Earnings\",\n       y = \"Total Savings\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#exploratory-data-analysis",
    "title": "Take-Home Exercise 01",
    "section": "4.1. Exploratory Data Analysis",
    "text": "4.1. Exploratory Data Analysis\n\n4.1.1 Demography of the Representative Residents\nThe demography of the representative residents are as shown in the graphs below.\n\nProportion of Education LevelProportion of AgeHappiness Index\n\n\nDesign Consideration Pie charts are used to represent data as a proportion or percentage of a whole. They are useful when we want to show how different categories contribute to the overall total or when we want to compare the size of different categories.\nIn this case, we make use of pie chart to show the education level composition of the representative residents (in %). Different colours are also used to represent the different levels of education for easy reference. We also make use of callout extensions (through ggrepel to show the %). The same colour scheme is applied to the callout boxes for easy association.\n\n\nShow the codes\n# create a pie chart to show the proportion of education level across the participants\n\nedu_count  &lt;- single_merged_data %&gt;%\n  group_by(educationLevel) %&gt;%\n  summarize(count = n()) %&gt;% \n  mutate(edu_pie_pct = round(count/sum(count)*100)) %&gt;% \n  mutate(ypos_p = rev(cumsum(rev(edu_pie_pct))),\n         pos_p = edu_pie_pct/2 + lead(ypos_p,1),\n         pos_p = if_else(is.na(pos_p), edu_pie_pct/2, pos_p))\n\nggplot(edu_count, \n       aes(x = \"\" , y = edu_pie_pct, \n           fill = fct_inorder(educationLevel))) +\n  geom_col(width = 1, color = 1) +\n  coord_polar(theta = \"y\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  geom_label_repel(data = edu_count,\n                   aes(y = pos_p, label = paste0(edu_pie_pct, \"%\")),\n                   size = 4.5, nudge_x = 1, color = c(1, 1, 1, 1), \n                   show.legend = FALSE) +\n  guides(fill = guide_legend(title = \"Education Level\")) +\n  labs(title = \"Proportion of Education Level\")+\n  xlab(\"\") + ylab(\"\") + \n  theme(legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5))+\n  theme_void()\n\n\n\n\n\nExplanation Of the total sample size of 880 (after removing the outliers), 45% of them have a Bachelor degree and above education, while the remaining representative residents have lower education of High School/College and below.\n\n\nDesign Consideration We make use of bar chart to show the breakdown of the representative residents’ age instead of pie chart so that we can compare the different age groups side-by-side. Besides the % of composition, the number of representative residents belonging to the respective age groups, are also included.\nDifferent colours are also used to represent the different age groups for easy reference. We also make use of callout extensions above the vertical bars (through ggrepel to show the number of representative residents and the %). The same colour scheme is applied to the callout boxes for easy association. The label of the x-axis ticks were amended for better clarity. In addition, the legend box was excluded as label ticks on the x-axis would have indicated the different groups.\n\n\nShow the codes\n# create a bar chart to show the proportion of age across the representative residents\nage_count  &lt;- single_merged_data %&gt;%\n  group_by(age_bin) %&gt;%\n  summarize(count = n()) %&gt;% \n  mutate(age_pct = round(count/sum(count)*100)) %&gt;% \n  mutate(ypos_p = rev(cumsum(rev(age_pct))),\n         pos_p = age_pct/2 + lead(ypos_p,1),\n         pos_p = if_else(is.na(pos_p), age_pct/2, pos_p))\n\nggplot(age_count, \n       aes(x = fct_inorder(age_bin) , y = count, \n           fill = fct_inorder(age_bin))) +\n  geom_bar(stat = \"identity\", width = 0.5, color = \"black\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  geom_label_repel(data = age_count,\n                   aes(label = paste0(count, \"(\", age_pct, \"%)\")),\n                   size = 4, nudge_x = c(0.1, 0.1, 0.1, 0.1), \n                   nudge_y = c(0, 0.1, 0.1, 0.1), \n                   color = \"grey20\",\n                   show.legend = FALSE) +\n  guides(fill = FALSE) +\n  labs(title = \"Proportion of Representative Residents by Age Group\") +\n  xlab(\"Age Group\") + ylab(\"Count\") + \n  scale_x_discrete(labels = c(\"30 and below\", \"31-40\", \"41-50\", \"Over 50\")) +\n  theme(plot.title = element_text(hjust = 0.5)) \n\n\n\n\n\nExplanation Based on the information presented, majority (30%) of the representatives are 30 years old or younger while the rest of the age groups were rather evenly distributed.\n\n\nDesign Consideration We make use of bar chart to show the breakdown of the representative residents’ happiness index instead of pie chart to facilitate visual comparison of the different happiness index side-by-side. Besides the % of composition, the number of representative residents with the respective happiness index are also included.\nDifferent colours are also used to represent the different groups of happiness index for easy reference. We also make use of callout extensions above the vertical bars (through ggrepel to show the number of representative residents and the %). The same colour scheme is applied to the callout boxes for easy association. The label of the x-axis ticks were amended for better clarity. In addition, the legend box was excluded as label ticks on the x-axis would have indicated the different groups.\n\n\nShow the codes\njov_count  &lt;- single_merged_data %&gt;%\n  group_by(jov_bin) %&gt;%\n  summarize(count = n()) %&gt;% \n  mutate(jov_pct = round(count/sum(count)*100)) %&gt;% \n  mutate(ypos_p = rev(cumsum(rev(jov_pct))),\n         pos_p = jov_pct/2 + lead(ypos_p,1),\n         pos_p = if_else(is.na(pos_p), jov_pct/2, pos_p))\n\nggplot(jov_count, \n       aes(x = fct_inorder(jov_bin) , y = count, \n           fill = fct_inorder(jov_bin))) +\n  geom_bar(stat = \"identity\", width = 0.5, color = \"black\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  geom_label_repel(data = jov_count,\n                   aes(label = paste0(count, \"(\", jov_pct, \"%)\")),\n                   size = 4, nudge_x = c(0.1, 0.1, 0.1, 0.1, 0.1), \n                   nudge_y = c(0.1, 0.1, 0.1, 0.1, 0.1), color = \"grey20\", \n                   show.legend = FALSE) +\n  guides(fill = FALSE) +\n  labs(title = \"Happiness Index of Representative Residents\") +\n  xlab(\"Happiness Index (from 0 to 1)\") + ylab(\"Count\") + \n  scale_x_discrete(labels = c(\"0.2 and below\", \"0.21-0.4\", \n                              \"0.41-0.6\", \"0.61-0.8\", \"Above 0.8\")) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nExplanation From the chart above, most of the representative residents (66%) are not very happy (i.e. 0.6 and below), with only 300 out of the 880 representatives (34%) are happy (Happiness Index from 0.61 onwards).\n\n\n\n\n\n4.1.2. Total Income and Savings with reference to Education Level\nDesign Consideration Scatterplots are generally used to show the relationship between two continuous variables.\nThe original intent was to include more interactive interface by making use DT (data table) and crosstalk packages to allow users to click on a point on the scatterplot to view more information about the selected representative resident. However, the idea was aborted as the points were scattered widely across the x-axis. If we were to include a DT table beside it, the scatterplot will become very small and cramped up. As such, the additional details on the selected representative resident were presented as hovertext instead.\nFor the graph below, we will compare the Total Income against the Total Savings of the representative residents. Users can select/unselect the different education levels to show on the graph by clicking on the legend on the right side of the chart. The actual total savings and income figures will also be displayed as hovering text when the cursor moves over the points.\n\n\nShow the codes\nfig &lt;- plot_ly(data = single_merged_data,\n               type=\"scatter\",\n               x = ~Total_sumEarn,\n               y = ~Total_saving,\n               color = ~educationLevel,\n               # Hover text:\n               text = ~paste(\"&lt;br&gt;Age: \", age, \n                             \"&lt;br&gt;Have Kids?: \", haveKids, \n                             \"&lt;br&gt;Household Size: \", householdSize, \n                             \"&lt;br&gt;Total Income: $\", Total_sumEarn,\n                             \"&lt;br&gt;Total Expenses: $\", Total_sumExp,\n                             \"&lt;br&gt;Total Savings: $\", Total_saving))\n\nfig &lt;- fig %&gt;% \n  layout(title = \"\\nTotal Income and Savings of Representative Residents\\n\",\n         yaxis = list(zeroline = FALSE, title = \"Total Savings ($)\\n\",\n                      titlefont = list(weight = \"bold\")),\n         xaxis = list(zeroline = FALSE, title = \"\\nTotal Income ($)\\n\",\n                      titlefont = list(weight = \"bold\")))\n\nfig\n\n\n\n\n\n\nExplanation Based on the interactive chart above, we observed participants with higher levels of education tend to earn more and save more, as opposed to those with lower levels of education.\n\n\n4.1.3. Total Income, Expenditure and Savings for the period of study\nDesign Consideration Ridgeline plot is a set of overlapped density plots, which could help us compare distributions of the dataset. They are useful for visualizing changes in distributions over time. As such, we will make use of such plots to present 3 sets of information for the period of study (i.e. Mar 2022 to Feb 2023).\n\nTotal Income by Education LevelTotal Expenditures by Education Level\n\n\n\n\nShow the codes\nggplot(data = expanded_merged_data, \n       aes(x = sum_earning, y = educationLevel, fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  \n    labs(title = 'Total Income by Education Level: {frame_time}',\n       y = \"Education Level\",\n       x = \"Total Income\") +\n  \n  theme(legend.position=\"none\",\n  text = element_text(family = \"Arial\"),\n  plot.title = element_text(face = \"bold\", size = 12),\n  \n  axis.title.x = element_text(size = 10, hjust = 1),\n  axis.title.y = element_text(size = 10, angle = 360, vjust=1),\n  axis.text = element_text(size = 8)) +\n  \n  scale_fill_viridis(name = \"sum_earning\", option = \"H\") +\n\n  transition_time(expanded_merged_data$YearMth) +\n  ease_aes('linear')\n\n\n\n\n\nExplanation\n\nRepresentative Residents with Graduates education have the highest income.\nThe income for all education levels remains consistent across the entire year.\nThere was a sharp increase in the income across all education levels in the month of March 2022.\n\n\n\n\n\nShow the codes\nggplot(data = expanded_merged_data, \n       aes(x = sum_expense, y = educationLevel, fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  \n    labs(title = 'Total Expenditures by Education Level: {frame_time}',\n       y = \"Education Level\",\n       x = \"Total Expenditure\") +\n  \n  theme(legend.position=\"none\",\n  text = element_text(family = \"Arial\"),\n  plot.title = element_text(face = \"bold\", size = 12),\n  \n  axis.title.x = element_text(face = \"bold\", size = 10, hjust = 1),\n  axis.title.y = element_text(face = \"bold\", size = 10, angle = 360, vjust=1),\n  axis.text = element_text(size = 8)) +\n  \n  scale_fill_viridis(name = \"sum_expense\", option = \"C\") +\n\n  transition_time(expanded_merged_data$YearMth) +\n  ease_aes('linear')\n\n\n\n\n\nExplanation\n\nThere was no significant difference in the spending across the different education levels.\nThe Representative Residents generally spent &lt;$3000 per month.\nIt was observed that there was a sharp increase of expenditure across all education levels in the month of March and could reach as high as $8000.\n\n\n\n\n\n\n4.1.4. Analysis of Monthly Income and Spending\nDesign Consideration We use an interactive scatterplot to analyse the monthly income with the spending of the representative residents on a monthly basis.\nFor the graph below, the x-axis represents the monthly income, while the y-axis shows the monthly expense as a percentage (over the monthly income). The label ticks of y-axis was intentionally left to exceed 100% (anything over 100% will imply that the resident overspent for that particular month. Different colours of the bubbles are used to represent the different education levels. Additional information such as the Age, Household Size and whether the resident has kids will also be shown when the user mouseover the points.\n\n\nShow the codes\nbp &lt;- expanded_merged_data %&gt;%\n  plot_ly(x = ~sum_earning, \n          y = ~expense_percent, \n          sizes = c(2, 100),\n          color = ~educationLevel, \n          frame = ~YearMonth, \n          text = ~paste(\"&lt;br&gt;Representative Resident Id: \", participantId,\n                        \"&lt;br&gt;Age: \", age,\n                        \"&lt;br&gt;Education Level: \", educationLevel,\n                        \"&lt;br&gt;Have Kids: \", haveKids,\n                        \"&lt;br&gt;Household Size: \", householdSize,\n                        \"&lt;br&gt;Monthly Income: $\", sum_earning, \n                        \"&lt;br&gt;Monthly Expense: $\", sum_expense,\n                        \"&lt;br&gt;% of Monthly Income Spent: \", expense_percent, \"%\"),\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(title = list(text= \"\\nMonthly Income vs % of Monthly Income Spent\\n\",\n                      weight=\"bold\"),\n         xaxis = list(title = \"\\nMonthly Income\", \n                      titlefont = list(weight = \"bold\")),\n         yaxis = list(title = \"% of Monthly Expenses over Income\\n\",\n                      titlefont = list(weight = \"bold\")),\n         showlegend = FALSE)\nbp\n\n\n\n\n\n\nExplanation From the graph, it appeared that there were some overspendings among the residents across the months. These residents typically belong to the lower education groups."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#one-sample-test",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#one-sample-test",
    "title": "Take-Home Exercise 01",
    "section": "4.2. One-sample test",
    "text": "4.2. One-sample test\n\nTotal EarningsTotal Earnings\n\n\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = single_merged_data,\n  x = Total_sumEarn,\n  type = \"bayes\",\n  test.value = 15000,\n  xlab = \"Total Earnings\"\n)\n\n\n\n\n\n\n\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = single_merged_data,\n  x = Total_sumExp,\n  type = \"bayes\",\n  test.value = 15000,\n  xlab = \"Total Expenses\"\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#two-sample-mean-test",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#two-sample-mean-test",
    "title": "Take-Home Exercise 01",
    "section": "4.2. Two-sample Mean Test",
    "text": "4.2. Two-sample Mean Test\nThe objective of a two-sample mean test is to compare the means of two independent samples and determine if they are significantly different from each other.\n\n\nShow the codes\nggbetweenstats(\n  data = single_merged_data,\n  x = haveKids, \n  y = Total_sumExp,\n  type = \"np\",\n  messages = FALSE\n) +\n  ylab(\"\\nTotal Expenditure\") +\n  xlab(\"\\nHave Kids?\") +\n  ggtitle(\"Total Expenditure of Representative Resides without and with Kids\\n\") +\n  theme(plot.title = element_text(hjust = 0.5)) \n\n\n\n\n\nExplanation The above violin plot shows that 247 representative residents with kids tend to spend more (approximately $2450) compared to the remaining 633 without kids.\nSince the p-value is very small (less than the significance level of 0.05), we can reject the null hypothesis that having kids will result in higher expenditure and conclude that there is a significant difference between the means of the two samples.\nHowever, we also noted that \\(\\hat{r}\\) value of -0.38 would indicate a moderate negative correlation between the two samples. This suggests that there may be a relationship between the samples, such that as one sample increases, the other sample decreases."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#the-correlation-between-wages-expenditures-and-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#the-correlation-between-wages-expenditures-and-age",
    "title": "Take-Home Exercise 01",
    "section": "4.5. The correlation between Wages, Expenditures and Age",
    "text": "4.5. The correlation between Wages, Expenditures and Age\n\nTotal Income and Total SavingAge and Wage Correlation\n\n\n\n\nCode\nggscatterstats(data = single_merged_data,\n               x = Total_sumEarn,\n               y = Total_saving,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Income and Savings\",\n       x = \"Total Income\",\n       y = \"Total Savings\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\")) \n\n\n\n\n\nWith a $\\hat{r}$ value of 0.99, it indicates that there is a very strong positive linear relationship between the Total Income and Total Savings (more income, more savings).\n\n\n\n\nCode\nggscatterstats(data = single_merged_data,\n               x = age,\n               y = Total_Wage,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Wages and Age\",\n       x = \"Age\",\n       y = \"Total wage\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nGiven that the $\\hat{r}$ value is -0.03, there is weak negative correlation between the Age and Wage. This means that as the age increases, the wage tends to decrease, even though the relationship is not very strong.\n\n\n\n\n\nCode\n# create a data frame\n# plot the box plot\nggplot(single_merged_data, aes(x = jov_bin, y = Total_sumExp)) +\n  geom_boxplot() +\n  labs(x = \"Joviality\", y = \"Total Expenditure\", title = \"Box Plot of Joviality and Total Expenditure\")\n\n\n\n\n\n\n\nCode\n#bubble plot - is it useful???\nbp &lt;- expanded_merged_data %&gt;%\n  plot_ly(x = ~sum_expense, \n          y = ~sum_earning, \n          size = ~householdSize, \n          color = ~educationLevel, \n          frame = ~YearMonth, \n          text = ~age, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\n\n\n\n\n\n\n\nCode\n#bubble plot - is it useful???\n# bp &lt;- expanded_merge_data %&gt;%\n#   plot_ly(x = ~sum_expense, \n#           y = ~sum_earning, \n#           size = ~householdSize, \n#           color = ~educationLevel, \n#           frame = ~YearMonth, \n#           text = ~age, \n#           hoverinfo = \"text\",\n#           type = 'scatter',\n#           mode = 'markers'\n#           )\n# bp"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#the-correlation-between-total-earnings-expenditures-and-savings",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#the-correlation-between-total-earnings-expenditures-and-savings",
    "title": "Take-Home Exercise 01",
    "section": "4.5. The correlation between Total Earnings, Expenditures and Savings",
    "text": "4.5. The correlation between Total Earnings, Expenditures and Savings\nThe correlation charts show that there is weak negative relationship between the Total Earnings and Total Expenditure. In addition, there is a very strong relationship between the Total Earnings and Total Savings.\n\nTotal Earnings and Total SavingTotal Earnings and Total Spending\n\n\n\n\nCode\nggscatterstats(data = single_merged_data,\n               x = Total_sumEarn,\n               y = Total_saving,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Earnings and Savings\",\n       x = \"Total Earnings\",\n       y = \"Total Savings\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nCode\nggscatterstats(data = single_merged_data,\n               x = Total_sumExp,\n               y = Total_sumEarn,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Expenditure and Total Earnings\",\n       x = \"Total Expenditure\",\n       y = \"Total Earnings\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nCode\n# create a data frame\n# plot the box plot\nggplot(single_merged_data, aes(x = jov_bin, y = Total_sumExp)) +\n  geom_boxplot() +\n  labs(x = \"Joviality\", y = \"Total Expenditure\", title = \"Box Plot of Joviality and Total Expenditure\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#plotting-ridgeline-graph",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#plotting-ridgeline-graph",
    "title": "Take-Home Exercise 01",
    "section": "4.6. Plotting ridgeline graph",
    "text": "4.6. Plotting ridgeline graph\n\n\nCode\nggplot(single_merged_data, \n       aes(x = Total_sumExp, \n           y = educationLevel)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    #fill = lighten(\"#7097BB\", .3),\n    fill = \"lightblue\",\n    color = \"grey30\"\n  ) +\n  scale_x_continuous(\n    name = \"Total Spending on Shelter\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nCode\nggplot(data = expanded_merge_data, aes(x = sum_expense, y = educationLevel, fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  \n    labs(title = 'Total Expenditures by Education Level: {frame_time}',\n       y = \"Education Level\",\n       x = \"Total Expenditure\") +\n  \n  theme(legend.position=\"none\",\n  text = element_text(family = \"Arial\"),\n  plot.title = element_text(face = \"bold\", size = 12),\n  \n  axis.title.x = element_text(size = 10, hjust = 1),\n  axis.title.y = element_text(size = 10),\n  axis.text = element_text(size = 8)) +\n  \n  scale_fill_viridis(name = \"sum_expense\", option = \"D\") +\n\n  #transition_time(expanded_merge_data$YearMthDay) +\n  transition_time(expanded_merge_data$YearMth) +\n  ease_aes('linear')\n\n\n\n\n\n\n\nCode\nggplot(data = expanded_merge_data, aes(x = sum_earning, y = educationLevel, fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  \n    labs(title = 'Total Income by Education Level: {frame_time}',\n       y = \"Education Level\",\n       x = \"Total Income\") +\n  \n  theme(legend.position=\"none\",\n  text = element_text(family = \"Arial\"),\n  plot.title = element_text(face = \"bold\", size = 12),\n  \n  axis.title.x = element_text(size = 10, hjust = 1),\n  axis.title.y = element_text(size = 10),\n  axis.text = element_text(size = 8)) +\n  \n  scale_fill_viridis(name = \"sum_earning\", option = \"D\") +\n\n  #transition_time(expanded_merge_data$YearMthDay) +\n  transition_time(expanded_merge_data$YearMth) +\n  ease_aes('linear')\n\n\n\n\n\n\n\nCode\nggplot(data = expanded_merge_data, aes(x = saving, y = educationLevel, fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  \n    labs(title = 'Savings by Education Level: {frame_time}',\n       y = \"Education Level\",\n       x = \"Savings\") +\n  \n  theme(legend.position=\"none\",\n  text = element_text(family = \"Arial\"),\n  plot.title = element_text(face = \"bold\", size = 12),\n  \n  axis.title.x = element_text(size = 10, hjust = 1),\n  axis.title.y = element_text(size = 10),\n  axis.text = element_text(size = 8)) +\n  \n  scale_fill_viridis(name = \"saving\", option = \"G\") +\n\n  #transition_time(expanded_merge_data$YearMthDay) +\n  transition_time(expanded_merge_data$YearMth) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#one-sample-means-test",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#one-sample-means-test",
    "title": "Take-Home Exercise 01",
    "section": "4.2. One-sample Means Test",
    "text": "4.2. One-sample Means Test\nThe objective of a one-sample mean test is to determine if the mean of a sample is statistically significantly different from a known population mean. The null hypothesis is that there is no difference between the sample mean and the population mean, and the alternative hypothesis is that there is a difference. This type of test is commonly used in research to determine if a sample is representative of a larger population. By performing a one-sample mean test, researchers can determine if the sample is significantly different from the population and draw conclusions about the population based on the sample.\n\nTotal IncomeTotal Expenditure\n\n\n\n\nShow the codes\nset.seed(1234)\n\ngghistostats(\n  data = single_merged_data,\n  x = Total_sumEarn,\n  type = \"bayes\",\n  test.value = 15000,\n  xlab = \"Total Income\"\n)\n\n\n\n\n\n\n\n\n\nShow the codes\nset.seed(1234)\n\ngghistostats(\n  data = single_merged_data,\n  x = Total_sumExp,\n  type = \"bayes\",\n  test.value = 15000,\n  xlab = \"Total Expenses\"\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#one-way-anova-test",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#one-way-anova-test",
    "title": "Take-Home Exercise 01",
    "section": "4.3 One-Way ANOVA Test",
    "text": "4.3 One-Way ANOVA Test\nOne-Way ANOVA (Analysis of Variance) test is used to determine whether there is a statistically significant difference between the means of three or more independent groups. The purpose of conducting a One-Way ANOVA test is to determine whether the variation in the response variable (dependent variable) is due to the variation in the factor being tested (independent variable) or whether it is simply due to chance.\nWe will conduct a One-Way ANOVA test on the Total Expenditures (dependent variable) with different levels of education (independent variable).\n\n\nShow the codes\nggbetweenstats(\n  data = single_merged_data,\n  x = educationLevel, \n  y = Total_sumExp,\n  type = \"np\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE) +\n\n  ggtitle(\"One-Way ANOVA Test for Total Expenditure by Education Level\\n\") + \n  theme(plot.title = element_text(hjust = 0.5)) +\n  xlab(\"\\nEducation Level\") + \n  ylab(\"Total Expenditure\\n\")\n\n\n\n\n\nExplanation A p-value of 0.03 means that there is a 3% probability of obtaining a test statistic as extreme or more extreme than the one observed, assuming the null hypothesis is true. This suggests that there is some evidence against the null hypothesis and that the observed differences in means between the groups may be statistically significant. It is also observed that the median values are slightly different across the different education levels."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#combine-the-2-data-sets",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#combine-the-2-data-sets",
    "title": "Take-Home Exercise 01",
    "section": "3.5. Combine the 2 data sets",
    "text": "3.5. Combine the 2 data sets\nWe will combine the finalised data sets of Participants and FinancialJournal into 1 single data frame for ease of analysis.\nFor the purpose of different analysis to be performed, we will create 2 sets of merged data:\n\nsingle_merged_data will have 1 row of record per participant\nexpanded_merged_data will comprise of a breakdown of the transactions by month for each participant\n\n\n\nShow the codes\n# Merge the two files based on the 'participantId' column\nsingle_merged_data &lt;- merge(participants, \n                            final_finjournal_single, \n                            by = \"participantId\")\n\n# expanded_merged_data contains a breakdown of the monthly transactions for each participant\nexpanded_merged_data &lt;- merge(participants, final_finjournal_wide, by = \"participantId\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-financial-journal-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#perform-data-wrangling-on-financial-journal-data",
    "title": "Take-Home Exercise 01",
    "section": "3.4. Perform Data Wrangling on financial journal data",
    "text": "3.4. Perform Data Wrangling on financial journal data\nAs part of the data wrangling process, we will also check the data set for duplicate records and remove them (if there is any).\n\n\nShow the codes\n# Load the FinancialJournal.csv into the environment\nfinjournal_raw &lt;- read_csv(\"data/FinancialJournal.csv\")\n\n# Check if 'finjournal' contains any duplicate rows\nhas_duplicates &lt;- any(duplicated(finjournal_raw))\n\nif (has_duplicates) {\n  # contains duplicate rows\n  \n  # Remove duplicate records from the 'finjournal_raw' data frame\n  finjournal &lt;- distinct(finjournal_raw)\n} else {\n  # No duplicate rows\n  # if there are no duplicate rows, we will just replicate finjournal_raw data for consistency\n  finjournal &lt;- finjournal_raw\n}\nfinjournal\n\n\n# A tibble: 1,512,523 × 4\n   participantId timestamp           category  amount\n           &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;      &lt;dbl&gt;\n 1             0 2022-03-01 00:00:00 Wage      2473. \n 2             0 2022-03-01 00:00:00 Shelter   -555. \n 3             0 2022-03-01 00:00:00 Education  -38.0\n 4             1 2022-03-01 00:00:00 Wage      2047. \n 5             1 2022-03-01 00:00:00 Shelter   -555. \n 6             1 2022-03-01 00:00:00 Education  -38.0\n 7             2 2022-03-01 00:00:00 Wage      2437. \n 8             2 2022-03-01 00:00:00 Shelter   -557. \n 9             2 2022-03-01 00:00:00 Education  -12.8\n10             3 2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,512,513 more rows\n\n\nLooking at the finjournal data set above, we noticed that there are a few problems that we need to resolve before we can perform analysis on them\n\nparticipantId is in &lt;dbl&gt; format. Since this is used to identify each participant uniquely, we will convert it to a string factor\ntimestamp is in &lt;POSIXct&gt; format. For the purpose of analysis, we will extract the month and year from this data item.\ncategory is in &lt;chr&gt; format. We will convert it to a string factor\namount values are too granular. We will round it to 2 decimal places. There are also negative values, which we will convert all to absolute values instead.\n\n\n\nShow the codes\n# Convert participantId, category columns into string factor \nfinjournal$participantId &lt;- as.factor(as.character(finjournal$participantId))\nfinjournal$category &lt;- as.factor(as.character(finjournal$category))\n\n# Extract the date component from timestamp column\nfinjournal$date &lt;- as.Date(finjournal$timestamp)\n\n# Extract the month and year from the date component\nfinjournal$YearMonth &lt;- format(finjournal$date, \"%Y-%m\")\n\n# Convert the negative amount values to absolute values and round to 2 decimal places\nfinjournal$amount &lt;- round(abs(finjournal$amount), 2)\n\n\n\n3.4.1. Checking the quality of financial journal data\nThere are often dirty data that we will need to cleanse before performing any data analysis. This portion will check on the quality of the financial journal data.\n\n3.4.1.1. Identifying any possible outliers\n\nPlotCode Chunk\n\n\n\n\n\n\n\n\n\n\n\n# group the finjournal data by participantId and get the transaction count\n# for each participant. We will also arrange the transaction count in \n# ascending order.\nfinjournal_grp &lt;- finjournal %&gt;%\n  group_by(participantId) %&gt;%\n  summarise(transaction_cnt = n()) %&gt;%\n  arrange(transaction_cnt)\n\n# Plotting a histogram with the data extracted for better visualisation\nplot &lt;- ggplot(data = finjournal_grp, \n               aes(x = transaction_cnt)) +\n  geom_histogram(color=\"gray30\", fill=\"deepskyblue3\") + \n  ylim(0, 150) +\n  ggtitle(\"Distribution of Transactions by Participants\") + \n  xlab(\"Transaction Count\") +\n  ylab(\"Number of Participants\") + \n  theme_light() +\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        axis.title.x = element_text(face = \"bold\"),\n        axis.title.y = element_text(face = \"bold\"))\n\nplot &lt;- ggplotly(plot, tooltip = c(\"y\"))\n\nplot\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs you noticed from the chart above, there is a number of participants (131 of them in total), who have a significantly low number of transaction records, which is far off from the main distribution. As such, we will treat these as outliers and remove them from our analysis.\n\n\n\n\n3.4.1.2. Removing the Outliers\nWe will proceed to remove the 131 participants who have significantly low number of transaction records, compared to the rest.\n\n\nShow the codes\n# Since we have arrange the number of transactions in ascending order in the \n# earlier code chunks, we can just get the transaction count for the last \n# record of the 131 outliers. \ntxn_count &lt;- finjournal_grp[131, \"transaction_cnt\"]\n\n# Extract the participants without the 131 participants by the transaction count\nfinjournal_grp_filtered &lt;- finjournal_grp %&gt;%\n  filter(transaction_cnt &gt; as.integer(txn_count))\n\n# Remove the 131 participants from the finjournal\nfinjournal_filtered &lt;- merge(finjournal, finjournal_grp_filtered, by = \"participantId\")\n\n\n\n\n3.4.1.3. Transposing the Category Into Individual Columns\nIn this section, we will be performing a series of data wrangling activities for each participant:\n\nsum up all the daily transactions amount based on the respective categories\ntranspose the transaction categories into multiple columns (Education, Food, Recreation, Shelter, Wage, RentAdjustment)\nreplace all the NA values to 0\nderive total monthly expenses and total monthly earnings\nderive monthly savings (earnings - expenses)\n\n\n\nShow the codes\n# Group the new filtered dataset by ParticipantId, Category and YearMonth, then\n# sum up all the daily transactions amount based on the respective categories\nfinal_finjournal &lt;- finjournal_filtered %&gt;% \n  group_by(participantId, category, YearMonth) %&gt;% \n  summarise(Total = sum(amount))\n\n# Transpose the categories to columns \nfinal_finjournal_wide &lt;- pivot_wider(final_finjournal, \n                               names_from = category, \n                               values_from = Total)\n\n# Replace all the NA values to 0\nfinal_finjournal_wide[is.na(final_finjournal_wide)] &lt;- 0.0\n\n# Derive the total monthly expenses, total monthly earnings (income), \n# monthly savings, % of monthly expenses (over monthly income) \n# for each participant \nfinal_finjournal_wide$sum_expense &lt;- final_finjournal_wide$Education + \n                                     final_finjournal_wide$Food +\n                                     final_finjournal_wide$Recreation + \n                                     final_finjournal_wide$Shelter\n\nfinal_finjournal_wide$sum_earning &lt;- final_finjournal_wide$Wage + \n                                     final_finjournal_wide$RentAdjustment\n\nfinal_finjournal_wide$saving &lt;- final_finjournal_wide$sum_earning -\n                                final_finjournal_wide$sum_expense\n\nfinal_finjournal_wide$expense_percent &lt;-\n  round(final_finjournal_wide$sum_expense/final_finjournal_wide$sum_earning*100, 2)\n\nfinal_finjournal_wide$YearMthDay &lt;- \n  as.Date(paste0(final_finjournal_wide$YearMonth,\"-01\"))\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe will aggregate all the monthly transactions by participants, since final_finjournal will contain the detailed YearMonth for each participant.\n\n\n\n\nShow the codes\n# To have 1 financial journal record per participant \n\nfinal_finjournal_single &lt;- final_finjournal_wide %&gt;% \n  group_by(participantId) %&gt;% \n  summarise(Total_Edu = sum(Education), \n            Total_Food = sum(Food),\n            Total_Rec = sum(Recreation),\n            Total_Shelter = sum(Shelter),\n            Total_Wage = sum(Wage),\n            Total_RentAdj = sum(RentAdjustment),\n            Total_sumExp = sum(sum_expense),\n            Total_sumEarn = sum(sum_earning),\n            Total_saving = sum(saving))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#correlation-tests",
    "href": "Take-home_Ex/Take-home_Ex01/Take-Home_Ex01.html#correlation-tests",
    "title": "Take-Home Exercise 01",
    "section": "4.4. Correlation Tests",
    "text": "4.4. Correlation Tests\nCorrelation tests are performed to investigate the strength and direction of a relationship between two variables. It helps to determine if the variables are related and, if so, how strongly they are related. As such, we will conduct 2 correlation tests here. The first correlation test will look at the relationship between Total Income and Total Savings; the second correlation test will examine the relationship between Age and Wages.\n\nTotal Income and Total Saving Correlation TestAge and Wage Correlation Test\n\n\nAs we have seen in Section 4.1.2 (Total Income and Savings with reference to Education Level), it seems that the more income a representative resident earn, the more he/she saves. We will examine the correlation coefficient to see if this is indeed true.\n\n\nShow the codes\nggscatterstats(data = single_merged_data,\n               x = Total_sumEarn,\n               y = Total_saving,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Income and Savings\",\n       x = \"Total Income\",\n       y = \"Total Savings\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\")) \n\n\n\n\n\nExplanation With a \\(\\hat{r}\\) value of 0.99, it indicates that there is a very strong positive linear relationship between the Total Income and Total Savings (more income, more savings).\n\n\n\n\nShow the codes\nggscatterstats(data = single_merged_data,\n               x = age,\n               y = Total_Wage,\n               marginal = FALSE) +\n  theme_minimal() +\n  labs(title=\"Correlation of Total Wages and Age\",\n       x = \"Age\",\n       y = \"Total wage\") +\n  \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nExplanation Given that the \\(\\hat{r}\\) value is -0.03, there is weak negative correlation between the Age and Wage. This means that as the age increases, the wage tends to decrease, even though the relationship is not very strong."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics & Applications",
    "section": "",
    "text": "Welcome to Ong Chae Hui’s web portal for the works done in ISSS608 Visual Analytics and Applications.\nIn this website, you will find all the coursework (Hands-On, In-Class and Take-Home Exercises) prepared in this course."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class Exercise 05",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\n\nRows: 54 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): label, Department, Title\ndbl (1): id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\nRows: 9063 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SentDate, Subject, MainSubject, sourceLabel, targetLabel\ndbl  (2): source, target\ntime (1): SentTime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#installing-and-launching-the-r-packages",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#installing-and-launching-the-r-packages",
    "title": "In-Class Exercise 05",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#importing-network-data-from-files",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#importing-network-data-from-files",
    "title": "In-Class Exercise 05",
    "section": "",
    "text": "GAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\n\nRows: 54 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): label, Department, Title\ndbl (1): id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\nRows: 9063 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SentDate, Subject, MainSubject, sourceLabel, targetLabel\ndbl  (2): source, target\ntime (1): SentTime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#reviewing-the-imported-data",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#reviewing-the-imported-data",
    "title": "In-Class Exercise 05",
    "section": "",
    "text": "glimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…"
  },
  {
    "objectID": "VAST-2023/MC1/MC1.html",
    "href": "VAST-2023/MC1/MC1.html",
    "title": "MC1",
    "section": "",
    "text": "pacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse)\n\n\nMC1 &lt;- fromJSON(\"data/MC1.json\")\n\n\nMC1_nodes &lt;- as_tibble(MC1$nodes) %&gt;%\n  select(id, type, country)\n\n\nMC1_edges &lt;- as_tibble(MC1$links) %&gt;%\n  select(source, target, type, weight, key)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website consists of a collection of the works done in ISSS608 Visual Analytics & Applications course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "2. R Graphics VS ggplot",
    "text": "2. R Graphics VS ggplot\n\n2.1. Plotting Graphics using R Graphics\n\n\nCode\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n2.2. Plotting Graphics using ggplot\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n2.2.1. Essential Grammatical Elements in ggplot2: data, showing empty canvas\n\n\nCode\nggplot(data=exam_data)\n\n\n\n\n\n\n\n2.2.2. Essential Grammatical Elements in ggplot2: Aesthetic mappings, showing x-axis and y-axis\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS))\n\n\n\n\n\n\n\n\n2.3. Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include: - geom_point for drawing individual points (e.g., a scatter plot) - geom_line for drawing lines (e.g., for a line charts) - geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations) - geom_bar for drawing bars (e.g., for bar charts) - geom_histogram for drawing binned values (e.g. a histogram) - geom_polygon for drawing arbitrary shapes geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n2.3.1. Essential Grammatical Elements in ggplot2: geom_bar, showing bar charts\n\n\nCode\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n2.3.2. Essential Grammatical Elements in ggplot2: geom_dotplot\nNote that the y-scale is not very useful and is very misleading\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n2.3.3. Essential Grammatical Elements in ggplot2: geom_dotplot, without y-scale\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) + \n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n2.3.4. Essential Grammatical Elements in ggplot2: geom_histogram\nDefault bin is 30\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n2.3.5. Essential Grammatical Elements in ggplot2: geom_dotplot, changing the defaults\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\n\n2.3.6. Modifying a geometric object by changing aes()\nCan also be used to colour, fill and alpha of the geometric\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n\n\n\n\n\n\n\n2.3.7. Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\nUsing colour or fill arguments of aes()\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n2.3.8. Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS,\n           colour = GENDER)) +\n  geom_boxplot()\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\n\nCode\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x= GENDER)) + \n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n2.3.9. Geometric Objects: geom_violin()\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\n\nCode\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n2.3.10. Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n2.3.11. geom objects can be combined\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\n2.4. Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n2.4.1. Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n2.4.2. Working with stat - the stat_summary() method\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() + \n  stat_summary(geom = \"point\",\n               fun.y=\"mean\",\n               colour=\"red\",\n               size=4)\n\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n2.4.3. Working with stat - the geom() method\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() + \n  geom_point(stat=\"summary\",\n               fun.y=\"mean\",\n               colour=\"red\",\n               size=4)\n\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n2.4.4. Adding a best fit curve on a scatterplot\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nBefore adding the best fit curve\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\nAfter adding the best fit curve\nNote that the default method used is loess.\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() + \n  geom_smooth(size=0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overridden as shown below\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() + \n  geom_smooth(method=lm,\n              size=0.5)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n2.5. Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n2.5.1. Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n2.5.2. facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\n\nCode\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n2.6. Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n2.6.1. Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\nFlipping the chart by using coord_flip().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() + \n  coord_flip()\n\n\n\n\n\n\n\n2.6.2. Changing the y-axis and x-axis range\nThe scatterplot is slightly misleading because the y-axis and x-axis range are not equal.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n2.7. Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example: - background colour - size of fonts - gridlines - colour of labels\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n2.7.1. Working with theme\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  }
]