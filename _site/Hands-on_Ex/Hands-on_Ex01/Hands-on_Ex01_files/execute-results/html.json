{
  "hash": "5ee9ca67942ab594bf2ae35abeff319c",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1\"\nauthor: \"Ong Chae Hui\"\nformat: \n  html:\n    code-fold: true\nengine: knitr\n---\n\n\n## 1. Getting Started\n\n### 1.1. Install and launch R packages\n\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n### 1.2. Importing the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n## 2. R Graphics VS ggplot\n\n### 2.1. Plotting Graphics using R Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### 2.2. Plotting Graphics using ggplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n#### 2.2.1. Essential Grammatical Elements in ggplot2: data, showing empty canvas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n#### 2.2.2. Essential Grammatical Elements in ggplot2: Aesthetic mappings, showing x-axis and y-axis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### 2.3. Essential Grammatical Elements in ggplot2: geom\n\nGeometric objects are the actual marks we put on a plot. Examples include: - geom_point for drawing individual points (e.g., a scatter plot) - geom_line for drawing lines (e.g., for a line charts) - geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations) - geom_bar for drawing bars (e.g., for bar charts) - geom_histogram for drawing binned values (e.g. a histogram) - geom_polygon for drawing arbitrary shapes geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n#### 2.3.1. Essential Grammatical Elements in ggplot2: geom_bar, showing bar charts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.2. Essential Grammatical Elements in ggplot2: geom_dotplot\n\n**Note that the y-scale is not very useful and is very misleading**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.3. Essential Grammatical Elements in ggplot2: geom_dotplot, without y-scale\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) + \n  scale_y_continuous(NULL, breaks = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.4. Essential Grammatical Elements in ggplot2: geom_histogram\n\n**Default bin is 30**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.5. Essential Grammatical Elements in ggplot2: geom_dotplot, changing the defaults\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.6. Modifying a geometric object by changing aes()\n\n**Can also be used to colour, fill and alpha of the geometric**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.7. Geometric Objects: geom-density()\n\n`geom-density()` computes and plots kernel density estimate, which is a smoothed version of the histogram.\n\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nUsing colour or fill arguments of aes()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.8. Geometric Objects: geom_boxplot\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all \"outlying\" points individually.\n\nThe code chunk below plots boxplots by using geom_boxplot().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS,\n           colour = GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x= GENDER)) + \n  geom_boxplot(notch = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.9. Geometric Objects: geom_violin()\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it's easier to compare several distributions since they're placed side by side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.10. Geometric Objects: geom_point()\n\ngeom_point() is especially useful for creating scatterplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n#### 2.3.11. geom objects can be combined\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### 2.4. Essential Grammatical Elements in ggplot2: stat\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n    -   a mean\n    -   a confidence limit\n-   There are two ways to use these functions:\n    -   add a stat\\_() function and override the default geom, or\n    -   add a geom\\_() function and override the default stat.\n\n#### 2.4.1. Working with stat()\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.2. Working with stat - the stat_summary() method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() + \n  stat_summary(geom = \"point\",\n               fun.y=\"mean\",\n               colour=\"red\",\n               size=4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nâ„¹ Please use the `fun` argument instead.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.3. Working with stat - the geom() method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() + \n  geom_point(stat=\"summary\",\n               fun.y=\"mean\",\n               colour=\"red\",\n               size=4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNo summary function supplied, defaulting to `mean_se()`\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.4. Adding a best fit curve on a scatterplot\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n**Before adding the best fit curve**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n**After adding the best fit curve**\n\nNote that the default method used is loess.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() + \n  geom_smooth(size=0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nThe default smoothing method can be overridden as shown below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() + \n  geom_smooth(method=lm,\n              size=0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### 2.5. Essential Grammatical Elements in ggplot2: Facets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n#### 2.5.1. Working with facet_wrap()\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n#### 2.5.2. facet_grid()\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### 2.6. Essential Grammatical Elements in ggplot2: Coordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n#### 2.6.1. Working with Coordinate\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nFlipping the chart by using coord_flip().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n#### 2.6.2. Changing the y-axis and x-axis range\n\nThe scatterplot is slightly misleading because the y-axis and x-axis range are not equal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### 2.7. Essential Grammatical Elements in ggplot2: themes\n\nThemes control elements of the graph not related to the data. For example: - background colour - size of fonts - gridlines - colour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n#### 2.7.1. Working with theme\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nA horizontal bar chart plotted using theme_classic().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nA horizontal bar chart plotted using theme_minimal().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}