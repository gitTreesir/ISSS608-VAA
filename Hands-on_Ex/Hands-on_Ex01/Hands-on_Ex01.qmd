---
title: "Hands-on Exercise 1"
---

# Getting Started

## Install and launch R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## R Graphics VS ggplot

### Plotting Graphics using R Graphics

```{r}
hist(exam_data$MATHS)
```

### Plotting Graphics using ggplot

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10,
                 boundary=100,
                 color="black",
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```

### Essential Grammatical Elements in ggplot2: data, showing empty canvas

```{r}
ggplot(data=exam_data)
```

### Essential Grammatical Elements in ggplot2: Aesthetic mappings, showing x-axis and y-axis

```{r}
ggplot(data=exam_data,
       aes(x = MATHS))
```

## Essential Grammatical Elements in ggplot2: geom

Geometric objects are the actual marks we put on a plot. Examples include: - geom_point for drawing individual points (e.g., a scatter plot) - geom_line for drawing lines (e.g., for a line charts) - geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations) - geom_bar for drawing bars (e.g., for bar charts) - geom_histogram for drawing binned values (e.g. a histogram) - geom_polygon for drawing arbitrary shapes geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

### Essential Grammatical Elements in ggplot2: geom_bar, showing bar charts

```{r}
ggplot(data=exam_data,
       aes(x = RACE)) +
  geom_bar()
```

### Essential Grammatical Elements in ggplot2: geom_dotplot

#### Note that the y-scale is not very useful and is very misleading

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

### Essential Grammatical Elements in ggplot2: geom_dotplot, without y-scale

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_dotplot(binwidth = 2.5,
               dotsize = 0.5) + 
  scale_y_continuous(NULL, breaks = NULL)
```

### Essential Grammatical Elements in ggplot2: geom_histogram

#### Default bin is 30

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram()
```

### Essential Grammatical Elements in ggplot2: geom_dotplot, changing the defaults

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue")
```

### Modifying a geometric object by changing aes()

#### Can also be used to colour, fill and alpha of the geometric

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           fill = GENDER)) +
  geom_histogram(bins=20,
                 color="grey30")
```

### Geometric Objects: geom-density()

geom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.

It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of Maths scores in a kernel density estimate plot.

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_density()
```

Using colour or fill arguments of aes()

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           color = GENDER)) +
  geom_density()
```

### Geometric Objects: geom_boxplot

geom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all "outlying" points individually.

The code chunk below plots boxplots by using geom_boxplot().

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           colour = GENDER)) +
  geom_boxplot()
```

Notches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x= GENDER)) + 
  geom_boxplot(notch = TRUE)
```

### Geometric Objects: geom_violin()

geom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it's easier to compare several distributions since they're placed side by side.

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_violin()
```

### Geometric Objects: geom_point()

geom_point() is especially useful for creating scatterplot.

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point()
```

### geom objects can be combined

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)
```

## Essential Grammatical Elements in ggplot2: stat

The Statistics functions statistically transform data, usually as some form of summary. For example:

-   frequency of values of a variable (bar graph)
    -   a mean
    -   a confidence limit
-   There are two ways to use these functions:
    -   add a stat\_() function and override the default geom, or
    -   add a geom\_() function and override the default stat.

### Working with stat()

The boxplots below are incomplete because the positions of the means were not shown.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot()
```

### Working with stat - the stat_summary() method

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() + 
  stat_summary(geom = "point",
               fun.y="mean",
               colour="red",
               size=4)
```

### Working with stat - the geom() method

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() + 
  geom_point(stat="summary",
               fun.y="mean",
               colour="red",
               size=4)
```

### Adding a best fit curve on a scatterplot

The scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.

#### Before adding the best fit curve

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point()
```

#### After adding the best fit curve

Note that the default method used is loess.

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() + 
  geom_smooth(size=0.5)
```

The default smoothing method can be overridden as shown below

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() + 
  geom_smooth(method=lm,
              size=0.5)
```

## Essential Grammatical Elements in ggplot2: Facets

Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.

### Working with facet_wrap()

facet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

### facet_grid()

facet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

## Essential Grammatical Elements in ggplot2: Coordinates

The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).
-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.
-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).
-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

### Working with Coordinate

By the default, the bar chart of ggplot2 is in vertical form.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

Flipping the chart by using coord_flip().

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() + 
  coord_flip()
```

### Changing the y-axis and x-axis range

The scatterplot is slightly misleading because the y-axis and x-axis range are not equal.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

## Essential Grammatical Elements in ggplot2: themes

Themes control elements of the graph not related to the data. For example: - background colour - size of fonts - gridlines - colour of labels

Built-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()

A list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).

### Working with theme

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

A horizontal bar chart plotted using theme_classic().

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

A horizontal bar chart plotted using theme_minimal().

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
